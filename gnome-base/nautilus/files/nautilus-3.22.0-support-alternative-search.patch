diff '--exclude=.git' -urN a/src/nautilus-query.c b/src/nautilus-query.c
--- a/src/nautilus-query.c	2016-09-13 17:06:51.000000000 -0400
+++ b/src/nautilus-query.c	2016-10-01 22:57:31.786030635 -0400
@@ -31,24 +31,6 @@
 #include "nautilus-query.h"
 #include "nautilus-enum-types.h"
 
-struct _NautilusQuery
-{
-    GObject parent;
-
-    char *text;
-    GFile *location;
-    GList *mime_types;
-    gboolean show_hidden;
-    GPtrArray *date_range;
-    NautilusQuerySearchType search_type;
-    NautilusQuerySearchContent search_content;
-
-    gboolean searching;
-    gboolean recursive;
-    char **prepared_words;
-    GMutex prepared_words_mutex;
-};
-
 static void  nautilus_query_class_init (NautilusQueryClass *class);
 static void  nautilus_query_init (NautilusQuery *query);
 
diff '--exclude=.git' -urN a/src/nautilus-query.h b/src/nautilus-query.h
--- a/src/nautilus-query.h	2016-09-13 17:06:51.000000000 -0400
+++ b/src/nautilus-query.h	2016-10-01 22:57:31.786030635 -0400
@@ -35,6 +35,27 @@
         NAUTILUS_QUERY_SEARCH_CONTENT_FULL_TEXT,
 } NautilusQuerySearchContent;
 
+struct _NautilusQuery
+{
+    GObject parent;
+
+    char *text;
+    GFile *location;
+    GList *mime_types;
+    gboolean show_hidden;
+    GPtrArray *date_range;
+    NautilusQuerySearchType search_type;
+    NautilusQuerySearchContent search_content;
+
+    gboolean searching;
+    gboolean recursive;
+    char **prepared_words;
+    GMutex prepared_words_mutex;
+
+	/* Misc */
+	gboolean alternative;
+};
+
 #define NAUTILUS_TYPE_QUERY		(nautilus_query_get_type ())
 
 G_DECLARE_FINAL_TYPE (NautilusQuery, nautilus_query, NAUTILUS, QUERY, GObject)
diff '--exclude=.git' -urN a/src/nautilus-search-directory.c b/src/nautilus-search-directory.c
--- a/src/nautilus-search-directory.c	2016-09-13 17:06:51.000000000 -0400
+++ b/src/nautilus-search-directory.c	2016-10-01 22:57:31.786030635 -0400
@@ -204,7 +204,10 @@
     nautilus_search_engine_model_set_model (model_provider, search->details->base_model);
 
     simple_provider = nautilus_search_engine_get_simple_provider (search->details->engine);
-    recursive = nautilus_query_get_recursive (search->details->query);
+	if (search->details->query->alternative)
+		recursive = FALSE;
+	else
+		recursive = nautilus_query_get_recursive (search->details->query);
     g_object_set (simple_provider, "recursive", recursive, NULL);
 
     reset_file_list (search);
diff '--exclude=.git' -urN a/src/nautilus-window-slot.c b/src/nautilus-window-slot.c
--- a/src/nautilus-window-slot.c	2016-09-13 17:06:51.000000000 -0400
+++ b/src/nautilus-window-slot.c	2016-10-02 00:34:52.194774957 -0400
@@ -124,6 +124,11 @@
 
 G_DEFINE_TYPE_WITH_PRIVATE (NautilusWindowSlot, nautilus_window_slot, GTK_TYPE_BOX);
 
+struct NautilusQueryData {
+    NautilusWindowSlot *self;
+    gboolean alternative;
+};
+
 static guint signals[LAST_SIGNAL] = { 0 };
 static GParamSpec *properties[NUM_PROPERTIES] = { NULL, };
 
@@ -144,7 +149,10 @@
 char *nautilus_window_slot_get_location_uri (NautilusWindowSlot *self);
 static void nautilus_window_slot_set_search_visible (NautilusWindowSlot *self,
                                                      gboolean            visible);
+static void nautilus_window_slot_set_alternative_search_visible (NautilusWindowSlot *self,
+                                                                 gboolean            visible);
 static gboolean nautilus_window_slot_get_search_visible (NautilusWindowSlot *self);
+static gboolean nautilus_window_slot_get_alternative_search_visible (NautilusWindowSlot *self);
 static void nautilus_window_slot_set_location (NautilusWindowSlot *self,
                                                GFile              *location);
 gboolean
@@ -304,6 +312,45 @@
 }
 
 static void
+update_alternative_search_visible (NautilusWindowSlot *self)
+{
+    NautilusWindowSlotPrivate *priv;
+    NautilusQuery *query;
+    NautilusView *view;
+
+    priv = nautilus_window_slot_get_instance_private (self);
+
+    view = nautilus_window_slot_get_current_view (self);
+    /* If we changed location just to another search location, for example,
+     * when changing the query, just keep the search visible.
+     * Make sure the search is visible though, since we could be returning
+     * from a previous search location when using the history */
+    if (nautilus_view_is_searching (view))
+    {
+        nautilus_window_slot_set_alternative_search_visible (self, TRUE);
+        return;
+    }
+
+    query = nautilus_query_editor_get_query (priv->query_editor);
+    if (query)
+    {
+        /* If the view is not searching, but search is visible, and the
+         * query is empty, we don't hide it. Some users enable the search
+         * and then change locations, then they search. */
+        if (!nautilus_query_is_empty (query))
+        {
+            nautilus_window_slot_set_alternative_search_visible (self, FALSE);
+        }
+        g_object_unref (query);
+    }
+
+    if (priv->pending_search_text)
+    {
+        nautilus_window_slot_search (self, g_strdup (priv->pending_search_text));
+    }
+}
+
+static void
 nautilus_window_slot_sync_actions (NautilusWindowSlot *self)
 {
     NautilusWindowSlotPrivate *priv;
@@ -326,6 +373,7 @@
      * Needs to be done after the change has been done, if not, a loop happens,
      * because setting the search enabled or not actually opens a location */
     update_search_visible (self);
+    update_alternative_search_visible (self);
 
     /* Files view mode */
     action = g_action_map_lookup_action (G_ACTION_MAP (priv->slot_action_group), "files-view-mode");
@@ -338,9 +386,11 @@
 
 static void
 query_editor_cancel_callback (NautilusQueryEditor *editor,
-                              NautilusWindowSlot  *self)
+                              NautilusQueryData *data)
 {
-    nautilus_window_slot_set_search_visible (self, FALSE);
+    nautilus_window_slot_set_search_visible (data->self, FALSE);
+    nautilus_window_slot_set_alternative_search_visible (data->self, FALSE);
+    g_free(data);
 }
 
 static void
@@ -358,6 +408,7 @@
         }
 
         nautilus_window_slot_set_search_visible (self, FALSE);
+        nautilus_window_slot_set_alternative_search_visible (self, FALSE);
     }
 }
 
@@ -365,14 +416,16 @@
 query_editor_changed_callback (NautilusQueryEditor *editor,
                                NautilusQuery       *query,
                                gboolean             reload,
-                               NautilusWindowSlot  *self)
+                               NautilusQueryData   *data)
 {
     NautilusView *view;
 
-    view = nautilus_window_slot_get_current_view (self);
+    view = nautilus_window_slot_get_current_view (data->self);
+
+    query->alternative = data->alternative;
 
     nautilus_view_set_search_query (view, query);
-    nautilus_window_slot_open_location_full (self, nautilus_view_get_location (view), 0, NULL);
+    nautilus_window_slot_open_location_full (data->self, nautilus_view_get_location (view), 0, NULL);
 }
 
 static void
@@ -445,14 +498,19 @@
 }
 
 static void
-show_query_editor (NautilusWindowSlot *self)
+show_query_editor (NautilusWindowSlot *self, gboolean alternative)
 {
     NautilusWindowSlotPrivate *priv;
     NautilusView *view;
+    NautilusQueryData *data;
 
     priv = nautilus_window_slot_get_instance_private (self);
     view = nautilus_window_slot_get_current_view (self);
 
+    data = g_new0 (NautilusQueryData, 1);
+    data->self = self;
+    data->alternative = alternative;
+
     if (nautilus_view_is_searching (view))
     {
         NautilusQuery *query;
@@ -472,13 +530,13 @@
     {
         priv->qe_changed_id =
             g_signal_connect (priv->query_editor, "changed",
-                              G_CALLBACK (query_editor_changed_callback), self);
+                              G_CALLBACK (query_editor_changed_callback), data);
     }
     if (priv->qe_cancel_id == 0)
     {
         priv->qe_cancel_id =
             g_signal_connect (priv->query_editor, "cancel",
-                              G_CALLBACK (query_editor_cancel_callback), self);
+                              G_CALLBACK (query_editor_cancel_callback), data);
     }
     if (priv->qe_activated_id == 0)
     {
@@ -502,6 +560,20 @@
     g_action_change_state (action, g_variant_new_boolean (visible));
 }
 
+static void
+nautilus_window_slot_set_alternative_search_visible (NautilusWindowSlot *self,
+                                         gboolean            visible)
+{
+    NautilusWindowSlotPrivate *priv;
+    GAction *action;
+
+    priv = nautilus_window_slot_get_instance_private (self);
+
+    action = g_action_map_lookup_action (G_ACTION_MAP (priv->slot_action_group),
+                                         "alternative-search-visible");
+    g_action_change_state (action, g_variant_new_boolean (visible));
+}
+
 static gboolean
 nautilus_window_slot_get_search_visible (NautilusWindowSlot *self)
 {
@@ -521,6 +593,25 @@
     return searching;
 }
 
+static gboolean
+nautilus_window_slot_get_alternative_search_visible (NautilusWindowSlot *self)
+{
+    NautilusWindowSlotPrivate *priv;
+    GAction *action;
+    GVariant *state;
+    gboolean searching;
+
+    priv = nautilus_window_slot_get_instance_private (self);
+    action = g_action_map_lookup_action (G_ACTION_MAP (priv->slot_action_group),
+                                         "alternative-search-visible");
+    state = g_action_get_state (action);
+    searching = g_variant_get_boolean (state);
+
+    g_variant_unref (state);
+
+    return searching;
+}
+
 void
 nautilus_window_slot_search (NautilusWindowSlot *self,
                              const gchar        *text)
@@ -542,6 +633,7 @@
     if (view)
     {
         nautilus_window_slot_set_search_visible (self, TRUE);
+        nautilus_window_slot_set_alternative_search_visible (self, TRUE);
         nautilus_query_editor_set_text (priv->query_editor, text);
     }
     else
@@ -573,6 +665,7 @@
     if (retval)
     {
         nautilus_window_slot_set_search_visible (self, TRUE);
+        nautilus_window_slot_set_alternative_search_visible (self, TRUE);
     }
 
     return retval;
@@ -796,7 +889,34 @@
 
         if (g_variant_get_boolean (state))
         {
-            show_query_editor (self);
+            show_query_editor (self, FALSE);
+        }
+        else
+        {
+            hide_query_editor (self);
+        }
+    }
+
+    g_variant_unref (current_state);
+}
+
+static void
+action_alternative_search_visible (GSimpleAction *action,
+                       GVariant      *state,
+                       gpointer       user_data)
+{
+    NautilusWindowSlot *self;
+    GVariant *current_state;
+
+    self = NAUTILUS_WINDOW_SLOT (user_data);
+    current_state = g_action_get_state (G_ACTION (action));
+    if (g_variant_get_boolean (current_state) != g_variant_get_boolean (state))
+    {
+        g_simple_action_set_state (action, state);
+
+        if (g_variant_get_boolean (state))
+        {
+            show_query_editor (self, TRUE);
         }
         else
         {
@@ -875,6 +995,7 @@
     { "files-view-mode", NULL, "u", "uint32 4", action_files_view_mode },
     { "files-view-mode-toggle", action_files_view_mode_toggle },
     { "search-visible", NULL, NULL, "false", action_search_visible },
+    { "alternative-search-visible", NULL, NULL, "false", action_alternative_search_visible },
 };
 
 static void
@@ -897,6 +1018,7 @@
     nautilus_application_set_accelerator (app, "slot.files-view-mode(uint32 1)", "<control>1");
     nautilus_application_set_accelerator (app, "slot.files-view-mode(uint32 0)", "<control>2");
     nautilus_application_set_accelerator (app, "slot.search-visible", "<control>f");
+    nautilus_application_set_accelerator (app, "slot.alternative-search-visible", "<shift><control>f");
 
     priv->view_mode_before_search = NAUTILUS_VIEW_INVALID_ID;
 }
@@ -2702,8 +2824,7 @@
 
     GTK_WIDGET_CLASS (nautilus_window_slot_parent_class)->grab_focus (widget);
 
-    if (nautilus_window_slot_get_search_visible (self))
-    {
+    if (nautilus_window_slot_get_search_visible (self) || nautilus_window_slot_get_alternative_search_visible (self)) {
         gtk_widget_grab_focus (GTK_WIDGET (priv->query_editor));
     }
     else if (priv->content_view)
diff '--exclude=.git' -urN a/src/nautilus-window-slot.h b/src/nautilus-window-slot.h
--- a/src/nautilus-window-slot.h	2016-09-13 17:06:51.000000000 -0400
+++ b/src/nautilus-window-slot.h	2016-10-01 22:57:31.787030617 -0400
@@ -37,6 +37,9 @@
 G_DECLARE_DERIVABLE_TYPE (NautilusWindowSlot, nautilus_window_slot, NAUTILUS, WINDOW_SLOT, GtkBox)
 
 #include "nautilus-query-editor.h"
+
+typedef struct NautilusQueryData NautilusQueryData;
+
 #include "nautilus-files-view.h"
 #include "nautilus-view.h"
 #include "nautilus-window.h"
