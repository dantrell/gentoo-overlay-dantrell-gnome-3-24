diff '--exclude=.git' -urN a/data/Makefile.am b/data/Makefile.am
--- a/data/Makefile.am	2017-05-11 08:45:43.000000000 -0400
+++ b/data/Makefile.am	2017-06-13 08:21:09.495601468 -0400
@@ -74,11 +74,46 @@
 		$(SASS) --sourcemap=none -f -q --update $<; \
 	fi
 
-resource_files = $(shell $(GLIB_COMPILE_RESOURCES) --sourcedir=$(srcdir)/theme --generate-dependencies $(srcdir)/gnome-shell-theme.gresource.xml)
-gnome-shell-theme.gresource: gnome-shell-theme.gresource.xml $(resource_files)
-	$(AM_V_GEN) $(GLIB_COMPILE_RESOURCES) --target=$@ --sourcedir=$(srcdir)/theme $<
-resourcedir = $(pkgdatadir)
-resource_DATA = gnome-shell-theme.gresource
+themedir = $(pkgdatadir)/theme
+dist_theme_DATA =				\
+	theme/calendar-arrow-left.svg		\
+	theme/calendar-arrow-right.svg		\
+	theme/calendar-today.svg		\
+	theme/checkbox-focused.svg		\
+	theme/checkbox-off-focused.svg		\
+	theme/checkbox-off.svg			\
+	theme/checkbox.svg			\
+	theme/close-window.svg			\
+	theme/close.svg				\
+	theme/corner-ripple-ltr.png		\
+	theme/corner-ripple-rtl.png		\
+	theme/dash-placeholder.svg		\
+	theme/filter-selected-ltr.svg		\
+	theme/filter-selected-rtl.svg		\
+	theme/gnome-shell.css			\
+	theme/gnome-shell-high-contrast.css	\
+	theme/logged-in-indicator.svg		\
+	theme/more-results.svg			\
+	theme/no-events.svg				\
+	theme/no-notifications.svg		\
+	theme/noise-texture.png			\
+	theme/pad-osd.css			\
+	theme/page-indicator-active.svg		\
+	theme/page-indicator-inactive.svg	\
+	theme/page-indicator-checked.svg	\
+	theme/page-indicator-hover.svg		\
+	theme/process-working.svg		\
+	theme/running-indicator.svg		\
+	theme/source-button-border.svg		\
+	theme/summary-counter.svg		\
+	theme/toggle-off-us.svg			\
+	theme/toggle-off-intl.svg		\
+	theme/toggle-off-hc.svg		\
+	theme/toggle-on-us.svg			\
+	theme/toggle-on-intl.svg		\
+	theme/toggle-on-hc.svg		\
+	theme/ws-switch-arrow-up.png		\
+	theme/ws-switch-arrow-down.png
 
 backgrounddir = $(pkgdatadir)
 background_DATA = perf-background.xml
diff '--exclude=.git' -urN a/data/gnome-shell-theme.gresource.xml b/data/gnome-shell-theme.gresource.xml
--- a/data/gnome-shell-theme.gresource.xml	2017-03-09 16:45:01.000000000 -0500
+++ b/data/gnome-shell-theme.gresource.xml	1969-12-31 19:00:00.000000000 -0500
@@ -1,43 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<gresources>
-  <gresource prefix="/org/gnome/shell/theme">
-    <file>calendar-arrow-left.svg</file>
-    <file>calendar-arrow-right.svg</file>
-    <file>calendar-today.svg</file>
-    <file>checkbox-focused.svg</file>
-    <file>checkbox-off-focused.svg</file>
-    <file>checkbox-off.svg</file>
-    <file>checkbox.svg</file>
-    <file>close-window.svg</file>
-    <file>close.svg</file>
-    <file>corner-ripple-ltr.png</file>
-    <file>corner-ripple-rtl.png</file>
-    <file>dash-placeholder.svg</file>
-    <file>filter-selected-ltr.svg</file>
-    <file>filter-selected-rtl.svg</file>
-    <file>gnome-shell.css</file>
-    <file>gnome-shell-high-contrast.css</file>
-    <file>logged-in-indicator.svg</file>
-    <file>more-results.svg</file>
-    <file>no-events.svg</file>
-    <file>no-notifications.svg</file>
-    <file>noise-texture.png</file>
-    <file>pad-osd.css</file>
-    <file>page-indicator-active.svg</file>
-    <file>page-indicator-inactive.svg</file>
-    <file>page-indicator-checked.svg</file>
-    <file>page-indicator-hover.svg</file>
-    <file>process-working.svg</file>
-    <file>running-indicator.svg</file>
-    <file>source-button-border.svg</file>
-    <file>summary-counter.svg</file>
-    <file>toggle-off-us.svg</file>
-    <file>toggle-off-intl.svg</file>
-    <file>toggle-off-hc.svg</file>
-    <file>toggle-on-us.svg</file>
-    <file>toggle-on-intl.svg</file>
-    <file>toggle-on-hc.svg</file>
-    <file>ws-switch-arrow-up.png</file>
-    <file>ws-switch-arrow-down.png</file>
-  </gresource>
-</gresources>
diff '--exclude=.git' -urN a/data/theme/gnome-shell-high-contrast.css b/data/theme/gnome-shell-high-contrast.css
--- a/data/theme/gnome-shell-high-contrast.css	2017-05-11 08:57:10.000000000 -0400
+++ b/data/theme/gnome-shell-high-contrast.css	2017-06-13 08:18:18.012397574 -0400
@@ -155,13 +155,13 @@
 .check-box StBin {
   width: 24px;
   height: 22px;
-  background-image: url("resource:///org/gnome/shell/theme/checkbox-off.svg"); }
+  background-image: url("checkbox-off.svg"); }
 .check-box:focus StBin {
-  background-image: url("resource:///org/gnome/shell/theme/checkbox-off-focused.svg"); }
+  background-image: url("checkbox-off-focused.svg"); }
 .check-box:checked StBin {
-  background-image: url("resource:///org/gnome/shell/theme/checkbox.svg"); }
+  background-image: url("checkbox.svg"); }
 .check-box:focus:checked StBin {
-  background-image: url("resource:///org/gnome/shell/theme/checkbox-focused.svg"); }
+  background-image: url("checkbox-focused.svg"); }
 
 /* Switches */
 .toggle-switch {
@@ -170,14 +170,14 @@
   background-size: contain; }
 
 .toggle-switch-us {
-  background-image: url("resource:///org/gnome/shell/theme/toggle-off-us.svg"); }
+  background-image: url("toggle-off-us.svg"); }
   .toggle-switch-us:checked {
-    background-image: url("resource:///org/gnome/shell/theme/toggle-on-us.svg"); }
+    background-image: url("toggle-on-us.svg"); }
 
 .toggle-switch-intl {
-  background-image: url("resource:///org/gnome/shell/theme/toggle-off-intl.svg"); }
+  background-image: url("toggle-off-intl.svg"); }
   .toggle-switch-intl:checked {
-    background-image: url("resource:///org/gnome/shell/theme/toggle-on-intl.svg"); }
+    background-image: url("toggle-on-intl.svg"); }
 
 /* links */
 .shell-link {
@@ -807,14 +807,14 @@
     background-color: rgba(0, 0, 0, 0.05); }
 
 .calendar-change-month-back {
-  background-image: url("resource:///org/gnome/shell/theme/calendar-arrow-left.svg"); }
+  background-image: url("calendar-arrow-left.svg"); }
   .calendar-change-month-back:rtl {
-    background-image: url("resource:///org/gnome/shell/theme/calendar-arrow-right.svg"); }
+    background-image: url("calendar-arrow-right.svg"); }
 
 .calendar-change-month-forward {
-  background-image: url("resource:///org/gnome/shell/theme/calendar-arrow-right.svg"); }
+  background-image: url("calendar-arrow-right.svg"); }
   .calendar-change-month-forward:rtl {
-    background-image: url("resource:///org/gnome/shell/theme/calendar-arrow-left.svg"); }
+    background-image: url("calendar-arrow-left.svg"); }
 
 .calendar-day-base {
   font-size: 80%;
@@ -854,7 +854,7 @@
 .calendar-day-with-events {
   color: white;
   font-weight: bold;
-  background-image: url("resource:///org/gnome/shell/theme/calendar-today.svg"); }
+  background-image: url("calendar-today.svg"); }
 
 .calendar-other-month-day {
   color: rgba(255, 255, 255, 0.15);
@@ -954,7 +954,7 @@
   padding: 0 4px; }
 
 #appMenu {
-  spinner-image: url("resource:///org/gnome/shell/theme/process-working.svg");
+  spinner-image: url("process-working.svg");
   spacing: 4px; }
   #appMenu .label-shadow {
     color: transparent; }
@@ -984,11 +984,11 @@
 .ripple-box {
   width: 52px;
   height: 52px;
-  background-image: url("resource:///org/gnome/shell/theme/corner-ripple-ltr.png");
+  background-image: url("corner-ripple-ltr.png");
   background-size: contain; }
 
 .ripple-box:rtl {
-  background-image: url("resource:///org/gnome/shell/theme/corner-ripple-rtl.png"); }
+  background-image: url("corner-ripple-rtl.png"); }
 
 .popup-menu-arrow {
   width: 16px;
@@ -998,7 +998,7 @@
   icon-size: 1.09em; }
 
 .window-close {
-  background-image: url("resource:///org/gnome/shell/theme/close-window.svg");
+  background-image: url("close-window.svg");
   background-size: 32px;
   height: 32px;
   width: 32px; }
@@ -1153,7 +1153,7 @@
 .search-provider-icon-more {
   width: 16px;
   height: 16px;
-  background-image: url("resource:///org/gnome/shell/theme/more-results.svg"); }
+  background-image: url("more-results.svg"); }
 
 /* DASHBOARD */
 #dash {
@@ -1167,7 +1167,7 @@
   #dash:rtl {
     border-radius: 9px 0 0 9px; }
   #dash .placeholder {
-    background-image: url("resource:///org/gnome/shell/theme/dash-placeholder.svg");
+    background-image: url("dash-placeholder.svg");
     background-size: contain;
     height: 24px; }
   #dash .empty-dash-drop-target {
@@ -1291,13 +1291,13 @@
   .page-indicator .page-indicator-icon {
     width: 18px;
     height: 18px;
-    background-image: url(resource:///org/gnome/shell/theme/page-indicator-inactive.svg); }
+    background-image: url(page-indicator-inactive.svg); }
   .page-indicator:hover .page-indicator-icon {
-    background-image: url(resource:///org/gnome/shell/theme/page-indicator-hover.svg); }
+    background-image: url(page-indicator-hover.svg); }
   .page-indicator:active .page-indicator-icon {
-    background-image: url(resource:///org/gnome/shell/theme/page-indicator-active.svg); }
+    background-image: url(page-indicator-active.svg); }
   .page-indicator:checked .page-indicator-icon, .page-indicator:checked:active {
-    background-image: url(resource:///org/gnome/shell/theme/page-indicator-checked.svg); }
+    background-image: url(page-indicator-checked.svg); }
 
 .app-well-app > .overview-icon.overview-icon-with-label,
 .grid-search-result .overview-icon.overview-icon-with-label {
@@ -1790,7 +1790,7 @@
   box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.4); }
 
 #lockDialogGroup {
-  background: #2e3436 url(resource:///org/gnome/shell/theme/noise-texture.png);
+  background: #2e3436 url(noise-texture.png);
   background-repeat: repeat; }
 
 #screenShieldNotifications StButton#vhandle, #screenShieldNotifications StButton#hhandle {
@@ -1886,6 +1886,6 @@
   width: 48px; }
 
 .toggle-switch-us, .toggle-switch-intl {
-  background-image: url("resource:///org/gnome/shell/theme/toggle-off-hc.svg"); }
+  background-image: url("toggle-off-hc.svg"); }
   .toggle-switch-us:checked, .toggle-switch-intl:checked {
-    background-image: url("resource:///org/gnome/shell/theme/toggle-on-hc.svg"); }
+    background-image: url("toggle-on-hc.svg"); }
diff '--exclude=.git' -urN a/data/theme/gnome-shell-high-contrast.scss b/data/theme/gnome-shell-high-contrast.scss
--- a/data/theme/gnome-shell-high-contrast.scss	2017-03-09 16:45:01.000000000 -0500
+++ b/data/theme/gnome-shell-high-contrast.scss	2017-06-13 08:18:18.012397574 -0400
@@ -9,6 +9,6 @@
 
 .toggle-switch { width: 48px; }
 .toggle-switch-us, .toggle-switch-intl {
-  background-image: url("resource:///org/gnome/shell/theme/toggle-off-hc.svg");
-  &:checked { background-image: url("resource:///org/gnome/shell/theme/toggle-on-hc.svg"); }
+  background-image: url("toggle-off-hc.svg");
+  &:checked { background-image: url("toggle-on-hc.svg"); }
 }
diff '--exclude=.git' -urN a/data/theme/gnome-shell-sass/_common.scss b/data/theme/gnome-shell-sass/_common.scss
--- a/data/theme/gnome-shell-sass/_common.scss	2017-05-11 08:45:57.000000000 -0400
+++ b/data/theme/gnome-shell-sass/_common.scss	2017-06-13 08:18:18.013397569 -0400
@@ -144,11 +144,11 @@
   StBin {
     width: 24px;
     height: 22px;
-    background-image: url("resource:///org/gnome/shell/theme/checkbox-off.svg");
+    background-image: url("checkbox-off.svg");
   }
-  &:focus StBin { background-image: url("resource:///org/gnome/shell/theme/checkbox-off-focused.svg"); }
-  &:checked StBin { background-image: url("resource:///org/gnome/shell/theme/checkbox.svg"); }
-  &:focus:checked StBin { background-image: url("resource:///org/gnome/shell/theme/checkbox-focused.svg"); }
+  &:focus StBin { background-image: url("checkbox-off-focused.svg"); }
+  &:checked StBin { background-image: url("checkbox.svg"); }
+  &:focus:checked StBin { background-image: url("checkbox-focused.svg"); }
 }
 
 /* Switches */
@@ -160,8 +160,8 @@
 
   @each $v in us, intl {
     .toggle-switch-#{$v} {
-      background-image: url("resource:///org/gnome/shell/theme/toggle-off-#{$v}.svg");
-      &:checked { background-image: url("resource:///org/gnome/shell/theme/toggle-on-#{$v}.svg"); }
+      background-image: url("toggle-off-#{$v}.svg");
+      &:checked { background-image: url("toggle-on-#{$v}.svg"); }
     }
   }
 
@@ -714,7 +714,7 @@
     height: 50px;
     background-color: $selected_bg_color;
     color: $selected_fg_color;
-    //background-image: url("resource:///org/gnome/shell/theme/ws-switch-arrow-up.png");
+    //background-image: url("ws-switch-arrow-up.png");
     background-size: 32px;
     border-radius: 8px;
   }
@@ -928,12 +928,12 @@
     }
 
       .calendar-change-month-back { //arrow back
-        background-image: url("resource:///org/gnome/shell/theme/calendar-arrow-left.svg");
-        &:rtl { background-image: url("resource:///org/gnome/shell/theme/calendar-arrow-right.svg"); }
+        background-image: url("calendar-arrow-left.svg");
+        &:rtl { background-image: url("calendar-arrow-right.svg"); }
       }
       .calendar-change-month-forward { //arrow foreward
-        background-image: url("resource:///org/gnome/shell/theme/calendar-arrow-right.svg");
-        &:rtl { background-image: url("resource:///org/gnome/shell/theme/calendar-arrow-left.svg"); }
+        background-image: url("calendar-arrow-right.svg");
+        &:rtl { background-image: url("calendar-arrow-left.svg"); }
       }
 
     .calendar-day-base {
@@ -975,7 +975,7 @@
       .calendar-day-with-events {
         color: lighten($fg_color,10%);
         font-weight: bold;
-        background-image: url("resource:///org/gnome/shell/theme/calendar-today.svg");
+        background-image: url("calendar-today.svg");
       }
       .calendar-other-month-day {
         color: transparentize($fg_color,0.85);
@@ -1087,7 +1087,7 @@
   }
 
   #appMenu {
-    spinner-image: url("resource:///org/gnome/shell/theme/process-working.svg");
+    spinner-image: url("process-working.svg");
     spacing: 4px;
 
     .label-shadow { color: transparent; }
@@ -1119,12 +1119,12 @@
 .ripple-box {
   width: 52px;
   height: 52px;
-  background-image: url("resource:///org/gnome/shell/theme/corner-ripple-ltr.png");
+  background-image: url("corner-ripple-ltr.png");
   background-size: contain;
 }
 
 .ripple-box:rtl {
-  background-image: url("resource:///org/gnome/shell/theme/corner-ripple-rtl.png");
+  background-image: url("corner-ripple-rtl.png");
 }
 
 // not really top bar only
@@ -1134,7 +1134,7 @@
 //close buttons
 
 .window-close {
-  background-image: url("resource:///org/gnome/shell/theme/close-window.svg");
+  background-image: url("close-window.svg");
   background-size: 32px;
   height: 32px;
   width: 32px;
@@ -1279,7 +1279,7 @@
   .search-provider-icon-more {
     width: 16px;
     height: 16px;
-    background-image: url("resource:///org/gnome/shell/theme/more-results.svg");
+    background-image: url("more-results.svg");
   }
 
 
@@ -1299,7 +1299,7 @@
     }
 
     .placeholder {
-      background-image: url("resource:///org/gnome/shell/theme/dash-placeholder.svg");
+      background-image: url("dash-placeholder.svg");
       background-size: contain;
       height: 24px;
     }
@@ -1428,13 +1428,13 @@
     .page-indicator-icon {
       width: 18px;
       height: 18px;
-      background-image: url(resource:///org/gnome/shell/theme/page-indicator-inactive.svg);
+      background-image: url(page-indicator-inactive.svg);
     }
 
-    &:hover .page-indicator-icon { background-image: url(resource:///org/gnome/shell/theme/page-indicator-hover.svg); }
-    &:active .page-indicator-icon { background-image: url(resource:///org/gnome/shell/theme/page-indicator-active.svg); }
+    &:hover .page-indicator-icon { background-image: url(page-indicator-hover.svg); }
+    &:active .page-indicator-icon { background-image: url(page-indicator-active.svg); }
     &:checked .page-indicator-icon,
-    &:checked:active { background-image: url(resource:///org/gnome/shell/theme/page-indicator-checked.svg); }
+    &:checked:active { background-image: url(page-indicator-checked.svg); }
   }
 
   .no-frequent-applications-label { @extend %status_text; }
@@ -1889,7 +1889,7 @@
 }
 
 #lockDialogGroup {
-  background: #2e3436 url(resource:///org/gnome/shell/theme/noise-texture.png);
+  background: #2e3436 url(noise-texture.png);
   background-repeat: repeat;
 }
 
diff '--exclude=.git' -urN a/data/theme/gnome-shell.css b/data/theme/gnome-shell.css
--- a/data/theme/gnome-shell.css	2017-05-11 08:57:10.000000000 -0400
+++ b/data/theme/gnome-shell.css	2017-06-13 08:18:18.013397569 -0400
@@ -155,13 +155,13 @@
 .check-box StBin {
   width: 24px;
   height: 22px;
-  background-image: url("resource:///org/gnome/shell/theme/checkbox-off.svg"); }
+  background-image: url("checkbox-off.svg"); }
 .check-box:focus StBin {
-  background-image: url("resource:///org/gnome/shell/theme/checkbox-off-focused.svg"); }
+  background-image: url("checkbox-off-focused.svg"); }
 .check-box:checked StBin {
-  background-image: url("resource:///org/gnome/shell/theme/checkbox.svg"); }
+  background-image: url("checkbox.svg"); }
 .check-box:focus:checked StBin {
-  background-image: url("resource:///org/gnome/shell/theme/checkbox-focused.svg"); }
+  background-image: url("checkbox-focused.svg"); }
 
 /* Switches */
 .toggle-switch {
@@ -170,14 +170,14 @@
   background-size: contain; }
 
 .toggle-switch-us {
-  background-image: url("resource:///org/gnome/shell/theme/toggle-off-us.svg"); }
+  background-image: url("toggle-off-us.svg"); }
   .toggle-switch-us:checked {
-    background-image: url("resource:///org/gnome/shell/theme/toggle-on-us.svg"); }
+    background-image: url("toggle-on-us.svg"); }
 
 .toggle-switch-intl {
-  background-image: url("resource:///org/gnome/shell/theme/toggle-off-intl.svg"); }
+  background-image: url("toggle-off-intl.svg"); }
   .toggle-switch-intl:checked {
-    background-image: url("resource:///org/gnome/shell/theme/toggle-on-intl.svg"); }
+    background-image: url("toggle-on-intl.svg"); }
 
 /* links */
 .shell-link {
@@ -807,14 +807,14 @@
     background-color: rgba(57, 63, 63, 0.05); }
 
 .calendar-change-month-back {
-  background-image: url("resource:///org/gnome/shell/theme/calendar-arrow-left.svg"); }
+  background-image: url("calendar-arrow-left.svg"); }
   .calendar-change-month-back:rtl {
-    background-image: url("resource:///org/gnome/shell/theme/calendar-arrow-right.svg"); }
+    background-image: url("calendar-arrow-right.svg"); }
 
 .calendar-change-month-forward {
-  background-image: url("resource:///org/gnome/shell/theme/calendar-arrow-right.svg"); }
+  background-image: url("calendar-arrow-right.svg"); }
   .calendar-change-month-forward:rtl {
-    background-image: url("resource:///org/gnome/shell/theme/calendar-arrow-left.svg"); }
+    background-image: url("calendar-arrow-left.svg"); }
 
 .calendar-day-base {
   font-size: 80%;
@@ -854,7 +854,7 @@
 .calendar-day-with-events {
   color: white;
   font-weight: bold;
-  background-image: url("resource:///org/gnome/shell/theme/calendar-today.svg"); }
+  background-image: url("calendar-today.svg"); }
 
 .calendar-other-month-day {
   color: rgba(238, 238, 236, 0.15);
@@ -954,7 +954,7 @@
   padding: 0 4px; }
 
 #appMenu {
-  spinner-image: url("resource:///org/gnome/shell/theme/process-working.svg");
+  spinner-image: url("process-working.svg");
   spacing: 4px; }
   #appMenu .label-shadow {
     color: transparent; }
@@ -984,11 +984,11 @@
 .ripple-box {
   width: 52px;
   height: 52px;
-  background-image: url("resource:///org/gnome/shell/theme/corner-ripple-ltr.png");
+  background-image: url("corner-ripple-ltr.png");
   background-size: contain; }
 
 .ripple-box:rtl {
-  background-image: url("resource:///org/gnome/shell/theme/corner-ripple-rtl.png"); }
+  background-image: url("corner-ripple-rtl.png"); }
 
 .popup-menu-arrow {
   width: 16px;
@@ -998,7 +998,7 @@
   icon-size: 1.09em; }
 
 .window-close {
-  background-image: url("resource:///org/gnome/shell/theme/close-window.svg");
+  background-image: url("close-window.svg");
   background-size: 32px;
   height: 32px;
   width: 32px; }
@@ -1153,7 +1153,7 @@
 .search-provider-icon-more {
   width: 16px;
   height: 16px;
-  background-image: url("resource:///org/gnome/shell/theme/more-results.svg"); }
+  background-image: url("more-results.svg"); }
 
 /* DASHBOARD */
 #dash {
@@ -1167,7 +1167,7 @@
   #dash:rtl {
     border-radius: 9px 0 0 9px; }
   #dash .placeholder {
-    background-image: url("resource:///org/gnome/shell/theme/dash-placeholder.svg");
+    background-image: url("dash-placeholder.svg");
     background-size: contain;
     height: 24px; }
   #dash .empty-dash-drop-target {
@@ -1291,13 +1291,13 @@
   .page-indicator .page-indicator-icon {
     width: 18px;
     height: 18px;
-    background-image: url(resource:///org/gnome/shell/theme/page-indicator-inactive.svg); }
+    background-image: url(page-indicator-inactive.svg); }
   .page-indicator:hover .page-indicator-icon {
-    background-image: url(resource:///org/gnome/shell/theme/page-indicator-hover.svg); }
+    background-image: url(page-indicator-hover.svg); }
   .page-indicator:active .page-indicator-icon {
-    background-image: url(resource:///org/gnome/shell/theme/page-indicator-active.svg); }
+    background-image: url(page-indicator-active.svg); }
   .page-indicator:checked .page-indicator-icon, .page-indicator:checked:active {
-    background-image: url(resource:///org/gnome/shell/theme/page-indicator-checked.svg); }
+    background-image: url(page-indicator-checked.svg); }
 
 .app-well-app > .overview-icon.overview-icon-with-label,
 .grid-search-result .overview-icon.overview-icon-with-label {
@@ -1790,7 +1790,7 @@
   box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.4); }
 
 #lockDialogGroup {
-  background: #2e3436 url(resource:///org/gnome/shell/theme/noise-texture.png);
+  background: #2e3436 url(noise-texture.png);
   background-repeat: repeat; }
 
 #screenShieldNotifications StButton#vhandle, #screenShieldNotifications StButton#hhandle {
diff '--exclude=.git' -urN a/js/gdm/authPrompt.js b/js/gdm/authPrompt.js
--- a/js/gdm/authPrompt.js	2017-03-24 22:24:41.000000000 -0400
+++ b/js/gdm/authPrompt.js	2017-06-13 08:18:18.013397569 -0400
@@ -1,7 +1,6 @@
 // -*- mode: js; js-indent-level: 4; indent-tabs-mode: nil -*-
 
 const Clutter = imports.gi.Clutter;
-const Gio = imports.gi.Gio;
 const Lang = imports.lang;
 const Signals = imports.signals;
 const St = imports.gi.St;
@@ -129,7 +128,7 @@
 
         this._initButtons();
 
-        let spinnerIcon = Gio.File.new_for_uri('resource:///org/gnome/shell/theme/process-working.svg');
+        let spinnerIcon = global.datadir + '/theme/process-working.svg';
         this._spinner = new Animation.AnimatedIcon(spinnerIcon, DEFAULT_BUTTON_WELL_ICON_SIZE);
         this._spinner.actor.opacity = 0;
         this._spinner.actor.show();
diff '--exclude=.git' -urN a/js/gdm/loginDialog.js b/js/gdm/loginDialog.js
--- a/js/gdm/loginDialog.js	2017-05-11 08:45:43.000000000 -0400
+++ b/js/gdm/loginDialog.js	2017-06-13 08:18:18.013397569 -0400
@@ -754,24 +754,24 @@
         this._bannerView.hide();
     },
 
-    _updateLogoTexture: function(cache, file) {
-        if (this._logoFile && !this._logoFile.equal(file))
+    _updateLogoTexture: function(cache, uri) {
+        if (this._logoFileUri != uri)
             return;
 
         this._logoBin.destroy_all_children();
-        if (this._logoFile) {
+        if (this._logoFileUri) {
             let scaleFactor = St.ThemeContext.get_for_stage(global.stage).scale_factor;
-            this._logoBin.add_child(this._textureCache.load_file_async(this._logoFile,
-                                                                       -1, _LOGO_ICON_HEIGHT,
-                                                                       scaleFactor));
+            this._logoBin.add_child(this._textureCache.load_uri_async(this._logoFileUri,
+                                                                      -1, _LOGO_ICON_HEIGHT,
+                                                                      scaleFactor));
         }
     },
 
     _updateLogo: function() {
         let path = this._settings.get_string(GdmUtil.LOGO_KEY);
 
-        this._logoFile = path ? Gio.file_new_for_path(path) : null;
-        this._updateLogoTexture(this._textureCache, this._logoFile);
+        this._logoFileUri = path ? Gio.file_new_for_path(path).get_uri() : null;
+        this._updateLogoTexture(this._textureCache, this._logoFileUri);
     },
 
     _onPrompted: function() {
diff '--exclude=.git' -urN a/js/ui/animation.js b/js/ui/animation.js
--- a/js/ui/animation.js	2017-04-24 18:28:18.000000000 -0400
+++ b/js/ui/animation.js	2017-06-13 08:18:18.013397569 -0400
@@ -12,7 +12,7 @@
 const Animation = new Lang.Class({
     Name: 'Animation',
 
-    _init: function(file, width, height, speed) {
+    _init: function(filename, width, height, speed) {
         this.actor = new St.Bin();
         this.actor.connect('destroy', Lang.bind(this, this._onDestroy));
         this._speed = speed;
@@ -23,7 +23,7 @@
         this._frame = 0;
 
         let scaleFactor = St.ThemeContext.get_for_stage(global.stage).scale_factor;
-        this._animations = St.TextureCache.get_default().load_sliced_image (file, width, height, scaleFactor,
+        this._animations = St.TextureCache.get_default().load_sliced_image (filename, width, height, scaleFactor,
                                                                             Lang.bind(this, this._animationsLoaded));
         this.actor.set_child(this._animations);
     },
@@ -82,7 +82,7 @@
     Name: 'AnimatedIcon',
     Extends: Animation,
 
-    _init: function(file, size) {
-        this.parent(file, size, size, ANIMATED_ICON_UPDATE_TIMEOUT);
+    _init: function(filename, size) {
+        this.parent(filename, size, size, ANIMATED_ICON_UPDATE_TIMEOUT);
     }
 });
diff '--exclude=.git' -urN a/js/ui/background.js b/js/ui/background.js
--- a/js/ui/background.js	2017-05-11 08:45:43.000000000 -0400
+++ b/js/ui/background.js	2017-06-13 19:08:36.734173746 -0400
@@ -1,98 +1,5 @@
 // -*- mode: js; js-indent-level: 4; indent-tabs-mode: nil -*-
 
-// READ THIS FIRST
-// Background handling is a maze of objects, both objects in this file, and
-// also objects inside Mutter. They all have a role.
-//
-// BackgroundManager
-//   The only object that other parts of GNOME Shell deal with; a
-//   BackgroundManager creates background actors and adds them to
-//   the specified container. When the background is changed by the
-//   user it will fade out the old actor and fade in the new actor.
-//   (This is separate from the fading for an animated background,
-//   since using two actors is quite inefficient.)
-//
-// MetaBackgroundImage
-//   An object represented an image file that will be used for drawing
-//   the background. MetaBackgroundImage objects asynchronously load,
-//   so they are first created in an unloaded state, then later emit
-//   a ::loaded signal when the Cogl object becomes available.
-//
-// MetaBackgroundImageCache
-//   A cache from filename to MetaBackgroundImage.
-//
-// BackgroundSource
-//   An object that is created for each GSettings schema (separate
-//   settings schemas are used for the lock screen and main background),
-//   and holds a reference to shared Background objects.
-//
-// MetaBackground
-//   Holds the specification of a background - a background color
-//   or gradient and one or two images blended together.
-//
-// Background
-//   JS delegate object that Connects a MetaBackground to the GSettings
-//   schema for the background.
-//
-// Animation
-//   A helper object that handles loading a XML-based animation; it is a
-//   wrapper for GnomeDesktop.BGSlideShow
-//
-// MetaBackgroundActor
-//   An actor that draws the background for a single monitor
-//
-// BackgroundCache
-//   A cache of Settings schema => BackgroundSource and of a single Animation.
-//   Also used to share file monitors.
-//
-// A static image, background color or gradient is relatively straightforward. The
-// calling code creates a separate BackgroundManager for each monitor. Since they
-// are created for the same GSettings schema, they will use the same BackgroundSource
-// object, which provides a single Background and correspondingly a single
-// MetaBackground object.
-//
-// BackgroundManager               BackgroundManager
-//        |        \               /        |
-//        |         BackgroundSource        |        looked up in BackgroundCache
-//        |                |                |
-//        |            Background           |
-//        |                |                |
-//   MetaBackgroundActor   |    MetaBackgroundActor
-//         \               |               /
-//          `------- MetaBackground ------'
-//                         |
-//                MetaBackgroundImage            looked up in MetaBackgroundImageCache
-//
-// The animated case is tricker because the animation XML file can specify different
-// files for different monitor resolutions and aspect ratios. For this reason,
-// the BackgroundSource provides different Background share a single Animation object,
-// which tracks the animation, but use different MetaBackground objects. In the
-// common case, the different MetaBackground objects will be created for the
-// same filename and look up the *same* MetaBackgroundImage object, so there is
-// little wasted memory:
-//
-// BackgroundManager               BackgroundManager
-//        |        \               /        |
-//        |         BackgroundSource        |        looked up in BackgroundCache
-//        |             /      \            |
-//        |     Background   Background     |
-//        |       |     \      /   |        |
-//        |       |    Animation   |        |        looked up in BackgroundCache
-// MetaBackgroundA|tor           Me|aBackgroundActor
-//         \      |                |       /
-//      MetaBackground           MetaBackground
-//                 \                 /
-//                MetaBackgroundImage            looked up in MetaBackgroundImageCache
-//                MetaBackgroundImage
-//
-// But the case of different filenames and different background images
-// is possible as well:
-//                        ....
-//      MetaBackground              MetaBackground
-//             |                          |
-//     MetaBackgroundImage         MetaBackgroundImage
-//     MetaBackgroundImage         MetaBackgroundImage
-
 const Clutter = imports.gi.Clutter;
 const GDesktopEnums = imports.gi.GDesktopEnums;
 const Gio = imports.gi.Gio;
@@ -107,8 +14,6 @@
 const Params = imports.misc.params;
 const Tweener = imports.ui.tweener;
 
-const DEFAULT_BACKGROUND_COLOR = Clutter.Color.from_pixel(0x2e3436ff);
-
 const BACKGROUND_SCHEMA = 'org.gnome.desktop.background';
 const PRIMARY_COLOR_KEY = 'primary-color';
 const SECONDARY_COLOR_KEY = 'secondary-color';
@@ -128,46 +33,246 @@
 
 let _backgroundCache = null;
 
-function _fileEqual0(file1, file2) {
-    if (file1 == file2)
-        return true;
-
-    if (!file1 || !file2)
-        return false;
-
-    return file1.equal(file2);
-}
-
 const BackgroundCache = new Lang.Class({
     Name: 'BackgroundCache',
 
     _init: function() {
+        this._patterns = [];
+        this._images = [];
+        this._pendingFileLoads = [];
         this._fileMonitors = {};
-        this._backgroundSources = {};
         this._animations = {};
     },
 
-    monitorFile: function(file) {
-        let key = file.hash();
-        if (this._fileMonitors[key])
+    getPatternContent: function(params) {
+        params = Params.parse(params, { monitorIndex: 0,
+                                        color: null,
+                                        secondColor: null,
+                                        shadingType: null,
+                                        effects: Meta.BackgroundEffects.NONE });
+
+        let content = null;
+
+        let candidateContent = null;
+        for (let i = 0; i < this._patterns.length; i++) {
+            if (this._patterns[i].get_shading() != params.shadingType)
+                continue;
+
+            if (!params.color.equal(this._patterns[i].get_color()))
+                continue;
+
+            if (params.shadingType != GDesktopEnums.BackgroundShading.SOLID &&
+                !params.secondColor.equal(this._patterns[i].get_second_color()))
+                continue;
+
+            candidateContent = this._patterns[i];
+
+            if (params.effects != this._patterns[i].effects)
+                continue;
+
+            break;
+        }
+
+        if (candidateContent) {
+            content = candidateContent.copy(params.monitorIndex, params.effects);
+        } else {
+            content = new Meta.Background({ meta_screen: global.screen,
+                                            monitor: params.monitorIndex,
+                                            effects: params.effects });
+
+            if (params.shadingType == GDesktopEnums.BackgroundShading.SOLID) {
+                content.load_color(params.color);
+            } else {
+                content.load_gradient(params.shadingType, params.color, params.secondColor);
+            }
+        }
+
+        this._patterns.push(content);
+        return content;
+    },
+
+    _monitorFile: function(filename) {
+        if (this._fileMonitors[filename])
             return;
 
+        let file = Gio.File.new_for_path(filename);
         let monitor = file.monitor(Gio.FileMonitorFlags.NONE, null);
-        monitor.connect('changed',
-                        Lang.bind(this, function() {
-                            this.emit('file-changed', file);
-                        }));
 
-        this._fileMonitors[key] = monitor;
+        let signalId = monitor.connect('changed',
+                                       Lang.bind(this, function() {
+                                           for (let i = 0; i < this._images.length; i++) {
+                                               if (this._images[i].get_filename() == filename)
+                                                   this._images.splice(i, 1);
+                                           }
+
+                                           monitor.disconnect(signalId);
+
+                                           this.emit('file-changed', filename);
+                                       }));
+
+        this._fileMonitors[filename] = monitor;
+    },
+
+    _removeContent: function(contentList, content) {
+        let index = contentList.indexOf(content);
+        if (index < 0)
+            throw new Error("Trying to remove invalid content: " + content);
+        contentList.splice(index, 1);
+    },
+
+    removePatternContent: function(content) {
+        this._removeContent(this._patterns, content);
+    },
+
+    removeImageContent: function(content) {
+        let filename = content.get_filename();
+
+        let hasOtherUsers = this._images.some(function(content) { return filename == content.get_filename(); });
+        if (!hasOtherUsers)
+            delete this._fileMonitors[filename];
+
+        this._removeContent(this._images, content);
+    },
+
+    _attachCallerToFileLoad: function(caller, fileLoad) {
+        fileLoad.callers.push(caller);
+
+        if (!caller.cancellable)
+            return;
+
+        caller.cancellable.connect(Lang.bind(this, function() {
+            let idx = fileLoad.callers.indexOf(caller);
+            fileLoad.callers.splice(idx, 1);
+
+            if (fileLoad.callers.length == 0) {
+                fileLoad.cancellable.cancel();
+
+                let idx = this._pendingFileLoads.indexOf(fileLoad);
+                this._pendingFileLoads.splice(idx, 1);
+            }
+        }));
+    },
+
+    _loadImageContent: function(params) {
+        params = Params.parse(params, { monitorIndex: 0,
+                                        style: null,
+                                        filename: null,
+                                        effects: Meta.BackgroundEffects.NONE,
+                                        cancellable: null,
+                                        onFinished: null });
+
+        let caller = { monitorIndex: params.monitorIndex,
+                       effects: params.effects,
+                       cancellable: params.cancellable,
+                       onFinished: params.onFinished };
+
+        for (let i = 0; i < this._pendingFileLoads.length; i++) {
+            let fileLoad = this._pendingFileLoads[i];
+
+            if (fileLoad.filename == params.filename &&
+                fileLoad.style == params.style) {
+                this._attachCallerToFileLoad(caller, fileLoad);
+                return;
+            }
+        }
+
+        let fileLoad = { filename: params.filename,
+                         style: params.style,
+                         cancellable: new Gio.Cancellable(),
+                         callers: [] };
+        this._attachCallerToFileLoad(caller, fileLoad);
+
+        let content = new Meta.Background({ meta_screen: global.screen });
+
+        content.load_file_async(params.filename,
+                                params.style,
+                                params.cancellable,
+                                Lang.bind(this,
+                                          function(object, result) {
+                                              try {
+                                                  content.load_file_finish(result);
+
+                                                  this._monitorFile(params.filename);
+                                              } catch(e) {
+                                                  content = null;
+                                              }
+
+                                              for (let i = 0; i < fileLoad.callers.length; i++) {
+                                                  let caller = fileLoad.callers[i];
+                                                  if (caller.onFinished) {
+                                                      let newContent;
+
+                                                      if (content) {
+                                                          newContent = content.copy(caller.monitorIndex, caller.effects);
+                                                          this._images.push(newContent);
+                                                      }
+
+                                                      caller.onFinished(newContent);
+                                                  }
+                                              }
+
+                                              let idx = this._pendingFileLoads.indexOf(fileLoad);
+                                              this._pendingFileLoads.splice(idx, 1);
+                                          }));
+    },
+
+    getImageContent: function(params) {
+        params = Params.parse(params, { monitorIndex: 0,
+                                        style: null,
+                                        filename: null,
+                                        effects: Meta.BackgroundEffects.NONE,
+                                        cancellable: null,
+                                        onFinished: null });
+
+        let content = null;
+
+        let candidateContent = null;
+        for (let i = 0; i < this._images.length; i++) {
+            if (this._images[i].get_style() != params.style)
+                continue;
+
+            if (this._images[i].get_filename() != params.filename)
+                continue;
+
+            if (params.style == GDesktopEnums.BackgroundStyle.SPANNED &&
+                this._images[i].monitor != params.monitorIndex)
+                continue;
+
+            candidateContent = this._images[i];
+
+            if (params.effects != this._images[i].effects)
+                continue;
+
+            break;
+        }
+
+        if (candidateContent) {
+            content = candidateContent.copy(params.monitorIndex, params.effects);
+
+            if (params.cancellable && params.cancellable.is_cancelled())
+                content = null;
+            else
+                this._images.push(content);
+
+            if (params.onFinished)
+                params.onFinished(content);
+        } else {
+            this._loadImageContent({ filename: params.filename,
+                                     style: params.style,
+                                     effects: params.effects,
+                                     monitorIndex: params.monitorIndex,
+                                     cancellable: params.cancellable,
+                                     onFinished: params.onFinished });
+
+        }
     },
 
     getAnimation: function(params) {
-        params = Params.parse(params, { file: null,
+        params = Params.parse(params, { filename: null,
                                         settingsSchema: null,
                                         onLoaded: null });
 
-        let animation = this._animations[params.settingsSchema];
-        if (animation && _fileEqual0(animation.file, params.file)) {
+        if (this._animations[params.settingsSchema] && this._animationFilename == params.filename) {
             if (params.onLoaded) {
                 let id = GLib.idle_add(GLib.PRIORITY_DEFAULT, Lang.bind(this, function() {
                     params.onLoaded(this._animations[params.settingsSchema]);
@@ -178,9 +283,11 @@
             return;
         }
 
-        animation = new Animation({ file: params.file });
+        let animation = new Animation({ filename: params.filename });
 
         animation.load(Lang.bind(this, function() {
+                           this._monitorFile(params.filename);
+                           this._animationFilename = params.filename;
                            this._animations[params.settingsSchema] = animation;
 
                            if (params.onLoaded) {
@@ -191,31 +298,6 @@
                                GLib.Source.set_name_by_id(id, '[gnome-shell] params.onLoaded');
                            }
                        }));
-    },
-
-    getBackgroundSource: function(layoutManager, settingsSchema) {
-        // The layoutManager is always the same one; we pass in it since
-        // Main.layoutManager may not be set yet
-
-        if (!(settingsSchema in this._backgroundSources)) {
-            this._backgroundSources[settingsSchema] = new BackgroundSource(layoutManager, settingsSchema);
-            this._backgroundSources[settingsSchema]._useCount = 1;
-        } else {
-            this._backgroundSources[settingsSchema]._useCount++;
-        }
-
-        return this._backgroundSources[settingsSchema];
-    },
-
-    releaseBackgroundSource: function(settingsSchema) {
-        if (settingsSchema in this._backgroundSources) {
-            let source = this._backgroundSources[settingsSchema];
-            source._useCount--;
-            if (source._useCount == 0) {
-                delete this._backgroundSources[settingsSchema];
-                source.destroy();
-            }
-        }
     }
 });
 Signals.addSignalMethods(BackgroundCache.prototype);
@@ -232,19 +314,28 @@
     _init: function(params) {
         params = Params.parse(params, { monitorIndex: 0,
                                         layoutManager: Main.layoutManager,
+                                        effects: Meta.BackgroundEffects.NONE,
                                         settings: null,
-                                        file: null,
-                                        style: null });
+                                        overrideImage: null });
+        this.actor = new Meta.BackgroundGroup();
+        this.actor._delegate = this;
 
-        this.background = new Meta.Background({ meta_screen: global.screen });
-        this.background._delegate = this;
+        this._destroySignalId = this.actor.connect('destroy',
+                                                   Lang.bind(this, this._destroy));
 
         this._settings = params.settings;
-        this._file = params.file;
-        this._style = params.style;
+        this._overrideImage = params.overrideImage;
         this._monitorIndex = params.monitorIndex;
         this._layoutManager = params.layoutManager;
+        this._effects = params.effects;
         this._fileWatches = {};
+        this._pattern = null;
+        // contains a single image for static backgrounds and
+        // two images (from and to) for slide shows
+        this._images = {};
+
+        this._brightness = 1.0;
+        this._vignetteSharpness = 0.2;
         this._cancellable = new Gio.Cancellable();
         this.isLoaded = false;
 
@@ -270,9 +361,13 @@
         this._load();
     },
 
-    destroy: function() {
+    _destroy: function() {
         this._cancellable.cancel();
-        this._removeAnimationTimeout();
+
+        if (this._updateAnimationTimeoutId) {
+            GLib.source_remove (this._updateAnimationTimeoutId);
+            this._updateAnimationTimeoutId = 0;
+        }
 
         let i;
         let keys = Object.keys(this._fileWatches);
@@ -289,6 +384,28 @@
             LoginManager.getLoginManager().disconnect(this._prepareForSleepId);
         this._prepareForSleepId = 0;
 
+        if (this._pattern) {
+            if (this._pattern.content)
+                this._cache.removePatternContent(this._pattern.content);
+
+            this._pattern.destroy();
+            this._pattern = null;
+        }
+
+        keys = Object.keys(this._images);
+        for (i = 0; i < keys.length; i++) {
+            let actor = this._images[keys[i]];
+
+            if (actor.content)
+                this._cache.removeImageContent(actor.content);
+
+            actor.destroy();
+            this._images[keys[i]] = null;
+        }
+
+        this.actor.disconnect(this._destroySignalId);
+        this._destroySignalId = 0;
+
         if (this._settingsChangedSignalId != 0)
             this._settings.disconnect(this._settingsChangedSignalId);
         this._settingsChangedSignalId = 0;
@@ -330,34 +447,59 @@
 
         let shadingType = this._settings.get_enum(COLOR_SHADING_TYPE_KEY);
 
-        if (shadingType == GDesktopEnums.BackgroundShading.SOLID)
-            this.background.set_color(color);
-        else
-            this.background.set_gradient(shadingType, color, secondColor);
+        let content = this._cache.getPatternContent({ monitorIndex: this._monitorIndex,
+                                                      effects: this._effects,
+                                                      color: color,
+                                                      secondColor: secondColor,
+                                                      shadingType: shadingType });
+
+        this._pattern = new Meta.BackgroundActor();
+        this.actor.add_child(this._pattern);
+
+        this._pattern.content = content;
     },
 
-    _watchFile: function(file) {
-        let key = file.hash();
-        if (this._fileWatches[key])
+    _watchCacheFile: function(filename) {
+        if (this._fileWatches[filename])
             return;
 
-        this._cache.monitorFile(file);
         let signalId = this._cache.connect('file-changed',
                                            Lang.bind(this, function(cache, changedFile) {
-                                               if (changedFile.equal(file)) {
-                                                   let imageCache = Meta.BackgroundImageCache.get_default();
-                                                   imageCache.purge(changedFile);
+                                               if (changedFile == filename) {
                                                    this.emit('changed');
                                                }
                                            }));
-        this._fileWatches[key] = signalId;
+        this._fileWatches[filename] = signalId;
     },
 
-    _removeAnimationTimeout: function() {
-        if (this._updateAnimationTimeoutId) {
-            GLib.source_remove(this._updateAnimationTimeoutId);
-            this._updateAnimationTimeoutId = 0;
-        }
+    _ensureImage: function(index) {
+        if (this._images[index])
+            return;
+
+        let actor = new Meta.BackgroundActor();
+
+        // The background pattern is the first actor in
+        // the group, and all images should be above that.
+        this.actor.insert_child_at_index(actor, index + 1);
+        this._images[index] = actor;
+    },
+
+    _updateImage: function(index, content, filename) {
+        content.brightness = this._brightness;
+        content.vignette_sharpness = this._vignetteSharpness;
+
+        let image = this._images[index];
+        if (image.content)
+            this._cache.removeImageContent(image.content);
+        image.content = content;
+        this._watchCacheFile(filename);
+    },
+
+    _updateAnimationProgress: function() {
+        if (this._images[1])
+            this._images[1].opacity = this._animation.transitionProgress * 255;
+
+        this._queueUpdateAnimation();
     },
 
     _updateAnimation: function() {
@@ -366,38 +508,46 @@
         this._animation.update(this._layoutManager.monitors[this._monitorIndex]);
         let files = this._animation.keyFrameFiles;
 
-        let finish = Lang.bind(this, function() {
+        if (files.length == 0) {
             this._setLoaded();
-            if (files.length > 1) {
-                this.background.set_blend(files[0], files[1],
-                                          this._animation.transitionProgress,
-                                          this._style);
-            } else if (files.length > 0) {
-                this.background.set_file(files[0], this._style);
-            } else {
-                this.background.set_file(null, this._style);
-            }
             this._queueUpdateAnimation();
-        });
+            return;
+        }
 
-        let cache = Meta.BackgroundImageCache.get_default();
         let numPendingImages = files.length;
         for (let i = 0; i < files.length; i++) {
-            this._watchFile(files[i]);
-            let image = cache.load(files[i]);
-            if (image.is_loaded()) {
+            if (this._images[i] && this._images[i].content &&
+                this._images[i].content.get_filename() == files[i]) {
+
                 numPendingImages--;
                 if (numPendingImages == 0)
-                    finish();
-            } else {
-                let id = image.connect('loaded',
-                                       Lang.bind(this, function() {
-                                           image.disconnect(id);
-                                           numPendingImages--;
-                                           if (numPendingImages == 0)
-                                               finish();
-                                       }));
+                    this._updateAnimationProgress();
+                continue;
             }
+            this._cache.getImageContent({ monitorIndex: this._monitorIndex,
+                                          effects: this._effects,
+                                          style: this._style,
+                                          filename: files[i],
+                                          cancellable: this._cancellable,
+                                          onFinished: Lang.bind(this, function(content, i) {
+                                              numPendingImages--;
+
+                                              if (!content) {
+                                                  this._setLoaded();
+                                                  if (numPendingImages == 0)
+                                                      this._updateAnimationProgress();
+                                                  return;
+                                              }
+
+                                              this._ensureImage(i);
+                                              this._updateImage(i, content, files[i]);
+
+                                              if (numPendingImages == 0) {
+                                                  this._setLoaded();
+                                                  this._updateAnimationProgress();
+                                              }
+                                          }, i)
+                                        });
         }
     },
 
@@ -430,45 +580,44 @@
         GLib.Source.set_name_by_id(this._updateAnimationTimeoutId, '[gnome-shell] this._updateAnimation');
     },
 
-    _loadAnimation: function(file) {
-        this._cache.getAnimation({ file: file,
+    _loadAnimation: function(filename) {
+        this._cache.getAnimation({ filename: filename,
                                    settingsSchema: this._settings.schema_id,
-                                   onLoaded: Lang.bind(this, function(animation) {
-                                       this._animation = animation;
-
-                                       if (!this._animation || this._cancellable.is_cancelled()) {
-                                           this._setLoaded();
-                                           return;
-                                       }
-
-                                       this._updateAnimation();
-                                       this._watchFile(file);
-                                   })
-                                 });
-    },
-
-    _loadImage: function(file) {
-        this.background.set_file(file, this._style);
-        this._watchFile(file);
-
-        let cache = Meta.BackgroundImageCache.get_default();
-        let image = cache.load(file);
-        if (image.is_loaded())
-            this._setLoaded();
-        else {
-            let id = image.connect('loaded',
-                                   Lang.bind(this, function() {
-                                       this._setLoaded();
-                                       image.disconnect(id);
-                                   }));
-        }
-    },
+                                             onLoaded: Lang.bind(this, function(animation) {
+                                                 this._animation = animation;
 
-    _loadFile: function(file) {
-        if (file.get_basename().endsWith('.xml'))
-            this._loadAnimation(file);
+                                                 if (!this._animation || this._cancellable.is_cancelled()) {
+                                                     this._setLoaded();
+                                                     return;
+                                                 }
+
+                                                 this._updateAnimation();
+                                                 this._watchCacheFile(filename);
+                                             })
+                                           });
+    },
+
+    _loadImage: function(filename) {
+        this._cache.getImageContent({ monitorIndex: this._monitorIndex,
+                                      effects: this._effects,
+                                      style: this._style,
+                                      filename: filename,
+                                      cancellable: this._cancellable,
+                                      onFinished: Lang.bind(this, function(content) {
+                                          if (content) {
+                                              this._ensureImage(0);
+                                              this._updateImage(0, content, filename);
+                                          }
+                                          this._setLoaded();
+                                      })
+                                    });
+    },
+
+    _loadFile: function(filename) {
+        if (filename.endsWith('.xml'))
+            this._loadAnimation(filename);
         else
-            this._loadImage(file);
+            this._loadImage(filename);
     },
 
     _load: function () {
@@ -476,150 +625,103 @@
 
         this._loadPattern();
 
-        if (!this._file) {
+        let filename;
+        if (this._overrideImage != null) {
+            filename = this._overrideImage;
+            this._style = GDesktopEnums.BackgroundStyle.ZOOM; // Hardcode
+        } else {
+            this._style = this._settings.get_enum(BACKGROUND_STYLE_KEY);
+            if (this._style == GDesktopEnums.BackgroundStyle.NONE) {
+                this._setLoaded();
+                return;
+            }
+
+            let uri = this._settings.get_string(PICTURE_URI_KEY);
+            if (GLib.uri_parse_scheme(uri) != null)
+                filename = Gio.File.new_for_uri(uri).get_path();
+            else
+                filename = uri;
+        }
+
+        if (!filename) {
             this._setLoaded();
             return;
         }
 
-        this._loadFile(this._file);
+        this._loadFile(filename);
     },
-});
-Signals.addSignalMethods(Background.prototype);
-
-let _systemBackground;
-
-const SystemBackground = new Lang.Class({
-    Name: 'SystemBackground',
-
-    _init: function() {
-        let file = Gio.File.new_for_uri('resource:///org/gnome/shell/theme/noise-texture.png');
 
-        if (_systemBackground == null) {
-            _systemBackground = new Meta.Background({ meta_screen: global.screen });
-            _systemBackground.set_color(DEFAULT_BACKGROUND_COLOR);
-            _systemBackground.set_file(file, GDesktopEnums.BackgroundStyle.WALLPAPER);
-        }
-
-        this.actor = new Meta.BackgroundActor({ meta_screen: global.screen,
-                                                monitor: 0,
-                                                background: _systemBackground });
-
-        let cache = Meta.BackgroundImageCache.get_default();
-        let image = cache.load(file);
-        if (image.is_loaded()) {
-            image = null;
-            let id = GLib.idle_add(GLib.PRIORITY_DEFAULT, Lang.bind(this, function() {
-                this.emit('loaded');
-                return GLib.SOURCE_REMOVE;
-            }));
-            GLib.Source.set_name_by_id(id, '[gnome-shell] SystemBackground.loaded');
-        } else {
-            let id = image.connect('loaded',
-                                   Lang.bind(this, function() {
-                                       this.emit('loaded');
-                                       image.disconnect(id);
-                                       image = null;
-                                   }));
-        }
+    get brightness() {
+        return this._brightness;
     },
-});
-Signals.addSignalMethods(SystemBackground.prototype);
-
-const BackgroundSource = new Lang.Class({
-    Name: 'BackgroundSource',
 
-    _init: function(layoutManager, settingsSchema) {
-        // Allow override the background image setting for performance testing
-        this._layoutManager = layoutManager;
-        this._overrideImage = GLib.getenv('SHELL_BACKGROUND_IMAGE');
-        this._settings = new Gio.Settings({ schema_id: settingsSchema });
-        this._backgrounds = [];
+    set brightness(factor) {
+        this._brightness = factor;
+        if (this._pattern && this._pattern.content)
+            this._pattern.content.brightness = factor;
 
-        this._monitorsChangedId = global.screen.connect('monitors-changed',
-                                                        Lang.bind(this, this._onMonitorsChanged));
+        let keys = Object.keys(this._images);
+        for (let i = 0; i < keys.length; i++) {
+            let image = this._images[keys[i]];
+            if (image && image.content)
+                image.content.brightness = factor;
+        }
     },
 
-    _onMonitorsChanged: function() {
-        for (let monitorIndex in this._backgrounds) {
-            let background = this._backgrounds[monitorIndex];
-
-            if (monitorIndex < this._layoutManager.monitors.length) {
-                background.updateResolution();
-            } else {
-                background.disconnect(background._changedId);
-                background.destroy();
-                delete this._backgrounds[monitorIndex];
-            }
-        }
+    get vignetteSharpness() {
+        return this._vignetteSharpness;
     },
 
-    getBackground: function(monitorIndex) {
-        let file = null;
-        let style;
-
-        // We don't watch changes to settings here,
-        // instead we rely on Background to watch those
-        // and emit 'changed' at the right time
+    set vignetteSharpness(sharpness) {
+        this._vignetteSharpness = sharpness;
+        if (this._pattern && this._pattern.content)
+            this._pattern.content.vignette_sharpness = sharpness;
 
-        if (this._overrideImage != null) {
-            file = Gio.File.new_for_path(this._overrideImage);
-            style = GDesktopEnums.BackgroundStyle.ZOOM; // Hardcode
-        } else {
-            style = this._settings.get_enum(BACKGROUND_STYLE_KEY);
-            if (style != GDesktopEnums.BackgroundStyle.NONE) {
-                let uri = this._settings.get_string(PICTURE_URI_KEY);
-                file = Gio.File.new_for_commandline_arg(uri);
-            }
+        let keys = Object.keys(this._images);
+        for (let i = 0; i < keys.length; i++) {
+            let image = this._images[keys[i]];
+            if (image && image.content)
+                image.content.vignette_sharpness = sharpness;
         }
+    }
+});
+Signals.addSignalMethods(Background.prototype);
 
-        // Animated backgrounds are (potentially) per-monitor, since
-        // they can have variants that depend on the aspect ratio and
-        // size of the monitor; for other backgrounds we can use the
-        // same background object for all monitors.
-        if (file == null || !file.get_basename().endsWith('.xml'))
-            monitorIndex = 0;
-
-        if (!(monitorIndex in this._backgrounds)) {
-            let background = new Background({
-                monitorIndex: monitorIndex,
-                layoutManager: this._layoutManager,
-                settings: this._settings,
-                file: file,
-                style: style
-            });
+const SystemBackground = new Lang.Class({
+    Name: 'SystemBackground',
 
-            background._changedId = background.connect('changed', Lang.bind(this, function() {
-                background.disconnect(background._changedId);
-                background.destroy();
-                delete this._backgrounds[monitorIndex];
-            }));
+    _init: function() {
+        this._cache = getBackgroundCache();
+        this.actor = new Meta.BackgroundActor();
 
-            this._backgrounds[monitorIndex] = background;
-        }
+        this._cache.getImageContent({ style: GDesktopEnums.BackgroundStyle.WALLPAPER,
+                                      filename: global.datadir + '/theme/noise-texture.png',
+                                      effects: Meta.BackgroundEffects.NONE,
+                                      onFinished: Lang.bind(this, function(content) {
+                                          this.actor.content = content;
+                                          this.emit('loaded');
+                                      })
+                                    });
 
-        return this._backgrounds[monitorIndex];
+        this.actor.connect('destroy', Lang.bind(this, this._onDestroy));
     },
 
-    destroy: function() {
-        global.screen.disconnect(this._monitorsChangedId);
+    _onDestroy: function() {
+        let content = this.actor.content;
 
-        for (let monitorIndex in this._backgrounds) {
-            let background = this._backgrounds[monitorIndex];
-            background.disconnect(background._changedId);
-            background.destroy();
-        }
-
-        this._backgrounds = null;
-    }
+        if (content)
+            this._cache.removeImageContent(content);
+    },
 });
+Signals.addSignalMethods(SystemBackground.prototype);
 
 const Animation = new Lang.Class({
     Name: 'Animation',
 
     _init: function(params) {
-        params = Params.parse(params, { file: null });
+        params = Params.parse(params, { filename: null });
 
-        this.file = params.file;
+        this.filename = params.filename;
         this.keyFrameFiles = [];
         this.transitionProgress = 0.0;
         this.transitionDuration = 0.0;
@@ -627,7 +729,9 @@
     },
 
     load: function(callback) {
-        this._show = new GnomeDesktop.BGSlideShow({ filename: this.file.get_path() });
+        let file = Gio.File.new_for_path(this.filename);
+
+        this._show = new GnomeDesktop.BGSlideShow({ filename: this.filename });
 
         this._show.load_async(null,
                               Lang.bind(this,
@@ -647,16 +751,16 @@
         if (this._show.get_num_slides() < 1)
             return;
 
-        let [progress, duration, isFixed, filename1, filename2] = this._show.get_current_slide(monitor.width, monitor.height);
+        let [progress, duration, isFixed, file1, file2] = this._show.get_current_slide(monitor.width, monitor.height);
 
         this.transitionDuration = duration;
         this.transitionProgress = progress;
 
-        if (filename1)
-            this.keyFrameFiles.push(Gio.File.new_for_path(filename1));
+        if (file1)
+            this.keyFrameFiles.push(file1);
 
-        if (filename2)
-            this.keyFrameFiles.push(Gio.File.new_for_path(filename2));
+        if (file2)
+            this.keyFrameFiles.push(file2);
     },
 });
 Signals.addSignalMethods(Animation.prototype);
@@ -668,122 +772,100 @@
         params = Params.parse(params, { container: null,
                                         layoutManager: Main.layoutManager,
                                         monitorIndex: null,
-                                        vignette: false,
+                                        effects: Meta.BackgroundEffects.NONE,
                                         controlPosition: true,
                                         settingsSchema: BACKGROUND_SCHEMA });
 
-        let cache = getBackgroundCache();
-        this._settingsSchema = params.settingsSchema;
-        this._backgroundSource = cache.getBackgroundSource(params.layoutManager, params.settingsSchema);
-
+        // Allow override the background image setting for performance testing
+        this._overrideImage = GLib.getenv('SHELL_BACKGROUND_IMAGE');
+        this._settings = new Gio.Settings({ schema_id: params.settingsSchema });
         this._container = params.container;
         this._layoutManager = params.layoutManager;
-        this._vignette = params.vignette;
+        this._effects = params.effects;
         this._monitorIndex = params.monitorIndex;
         this._controlPosition = params.controlPosition;
 
-        this.backgroundActor = this._createBackgroundActor();
-        this._newBackgroundActor = null;
+        this.background = this._createBackground();
+        this._newBackground = null;
     },
 
     destroy: function() {
-        let cache = getBackgroundCache();
-        cache.releaseBackgroundSource(this._settingsSchema);
-        this._backgroundSource = null;
-
-        if (this._newBackgroundActor) {
-            this._newBackgroundActor.destroy();
-            this._newBackgroundActor = null;
-        }
-
-        if (this.backgroundActor) {
-            this.backgroundActor.destroy();
-            this.backgroundActor = null;
+        if (this._newBackground) {
+            this._newBackground.actor.destroy();
+            this._newBackground = null;
         }
-    },
 
-    _swapBackgroundActor: function() {
-        let oldBackgroundActor = this.backgroundActor;
-        this.backgroundActor = this._newBackgroundActor;
-        this._newBackgroundActor = null;
-        this.emit('changed');
-
-        Tweener.addTween(oldBackgroundActor,
-                         { opacity: 0,
-                           time: FADE_ANIMATION_TIME,
-                           transition: 'easeOutQuad',
-                           onComplete: function() {
-                               oldBackgroundActor.background.run_dispose();
-                               oldBackgroundActor.destroy();
-                           }
-                         });
-    },
-
-    _updateBackgroundActor: function() {
-        if (this._newBackgroundActor) {
-            /* Skip displaying existing background queued for load */
-            this._newBackgroundActor.destroy();
-            this._newBackgroundActor = null;
+        if (this.background) {
+            this.background.actor.destroy();
+            this.background = null;
         }
+    },
 
-        let newBackgroundActor = this._createBackgroundActor();
-        newBackgroundActor.vignette_sharpness = this.backgroundActor.vignette_sharpness;
-        newBackgroundActor.brightness = this.backgroundActor.brightness;
-        newBackgroundActor.visible = this.backgroundActor.visible;
+    _updateBackground: function() {
+        let newBackground = this._createBackground();
+        newBackground.vignetteSharpness = this.background.vignetteSharpness;
+        newBackground.brightness = this.background.brightness;
+        newBackground.visible = this.background.visible;
 
-        this._newBackgroundActor = newBackgroundActor;
+        newBackground.loadedSignalId = newBackground.connect('loaded',
+            Lang.bind(this, function() {
+                newBackground.disconnect(newBackground.loadedSignalId);
+                newBackground.loadedSignalId = 0;
 
-        let background = newBackgroundActor.background._delegate;
+                if (this._newBackground != newBackground) {
+                    /* Not interesting, we queued another load */
+                    newBackground.actor.destroy();
+                    return;
+                }
 
-        if (background.isLoaded) {
-            this._swapBackgroundActor();
-        } else {
-            newBackgroundActor.loadedSignalId = background.connect('loaded',
-                Lang.bind(this, function() {
-                    background.disconnect(newBackgroundActor.loadedSignalId);
-                    newBackgroundActor.loadedSignalId = 0;
+                Tweener.addTween(this.background.actor,
+                                 { opacity: 0,
+                                   time: FADE_ANIMATION_TIME,
+                                   transition: 'easeOutQuad',
+                                   onComplete: Lang.bind(this, function() {
+                                       this.background.actor.destroy();
+                                       this.background = newBackground;
+                                       this._newBackground = null;
 
-                    this._swapBackgroundActor();
+                                       this.emit('changed');
+                                   })
+                                 });
+        }));
 
-                }));
-        }
+        this._newBackground = newBackground;
     },
 
-    _createBackgroundActor: function() {
-        let background = this._backgroundSource.getBackground(this._monitorIndex);
-        let backgroundActor = new Meta.BackgroundActor({ meta_screen: global.screen,
-                                                         monitor: this._monitorIndex,
-                                                         background: background.background,
-                                                         vignette: this._vignette,
-                                                         vignette_sharpness: 0.5,
-                                                         brightness: 0.5,
-                                                       });
-
-        this._container.add_child(backgroundActor);
+    _createBackground: function() {
+        let background = new Background({ monitorIndex: this._monitorIndex,
+                                          layoutManager: this._layoutManager,
+                                          effects: this._effects,
+                                          settings: this._settings,
+                                          overrideImage: this._overrideImage });
+        this._container.add_child(background.actor);
 
         let monitor = this._layoutManager.monitors[this._monitorIndex];
 
-        backgroundActor.set_size(monitor.width, monitor.height);
+        background.actor.set_size(monitor.width, monitor.height);
         if (this._controlPosition) {
-            backgroundActor.set_position(monitor.x, monitor.y);
-            backgroundActor.lower_bottom();
+            background.actor.set_position(monitor.x, monitor.y);
+            background.actor.lower_bottom();
         }
 
-        let changeSignalId = background.connect('changed', Lang.bind(this, function() {
-            background.disconnect(changeSignalId);
-            changeSignalId = null;
-            this._updateBackgroundActor();
+        background.changeSignalId = background.connect('changed', Lang.bind(this, function() {
+            background.disconnect(background.changeSignalId);
+            background.changeSignalId = 0;
+            this._updateBackground();
         }));
 
-        backgroundActor.connect('destroy', Lang.bind(this, function() {
-            if (changeSignalId)
-                background.disconnect(changeSignalId);
+        background.actor.connect('destroy', Lang.bind(this, function() {
+            if (background.changeSignalId)
+                background.disconnect(background.changeSignalId);
 
-            if (backgroundActor.loadedSignalId)
-                background.disconnect(backgroundActor.loadedSignalId);
+            if (background.loadedSignalId)
+                background.disconnect(background.loadedSignalId);
         }));
 
-        return backgroundActor;
+        return background;
     },
 });
 Signals.addSignalMethods(BackgroundManager.prototype);
diff '--exclude=.git' -urN a/js/ui/calendar.js b/js/ui/calendar.js
--- a/js/ui/calendar.js	2017-04-24 18:28:18.000000000 -0400
+++ b/js/ui/calendar.js	2017-06-13 08:18:18.014397565 -0400
@@ -1053,8 +1053,8 @@
 
         this._date = new Date();
 
-        let todayFile = Gio.File.new_for_uri('resource:///org/gnome/shell/theme/no-notifications.svg');
-        let otherFile = Gio.File.new_for_uri('resource:///org/gnome/shell/theme/no-events.svg');
+        let todayFile = Gio.File.new_for_path(global.datadir + '/theme/no-notifications.svg');
+        let otherFile = Gio.File.new_for_path(global.datadir + '/theme/no-events.svg');
         this._todayIcon = new Gio.FileIcon({ file: todayFile });
         this._otherIcon = new Gio.FileIcon({ file: otherFile });
 
diff '--exclude=.git' -urN a/js/ui/components/keyring.js b/js/ui/components/keyring.js
--- a/js/ui/components/keyring.js	2017-03-09 16:45:01.000000000 -0500
+++ b/js/ui/components/keyring.js	2017-06-13 08:18:18.014397565 -0400
@@ -127,7 +127,7 @@
             ShellEntry.addContextMenu(this._passwordEntry, { isPassword: true });
             this._passwordEntry.clutter_text.connect('activate', Lang.bind(this, this._onPasswordActivate));
 
-            let spinnerIcon = Gio.File.new_for_uri('resource:///org/gnome/shell/theme/process-working.svg');
+            let spinnerIcon = global.datadir + '/theme/process-working.svg';
             this._workSpinner = new Animation.AnimatedIcon(spinnerIcon, WORK_SPINNER_ICON_SIZE);
             this._workSpinner.actor.opacity = 0;
 
diff '--exclude=.git' -urN a/js/ui/components/polkitAgent.js b/js/ui/components/polkitAgent.js
--- a/js/ui/components/polkitAgent.js	2017-04-24 18:28:18.000000000 -0400
+++ b/js/ui/components/polkitAgent.js	2017-06-13 08:18:18.014397565 -0400
@@ -143,7 +143,7 @@
         this._passwordBox.add(this._passwordEntry,
                               { expand: true });
 
-        let spinnerIcon = Gio.File.new_for_uri('resource:///org/gnome/shell/theme/process-working.svg');
+        let spinnerIcon = global.datadir + '/theme/process-working.svg';
         this._workSpinner = new Animation.AnimatedIcon(spinnerIcon, WORK_SPINNER_ICON_SIZE);
         this._workSpinner.actor.opacity = 0;
 
diff '--exclude=.git' -urN a/js/ui/extensionSystem.js b/js/ui/extensionSystem.js
--- a/js/ui/extensionSystem.js	2017-05-04 18:41:16.000000000 -0400
+++ b/js/ui/extensionSystem.js	2017-06-13 08:18:18.014397565 -0400
@@ -75,7 +75,7 @@
 
     if (extension.stylesheet) {
         let theme = St.ThemeContext.get_for_stage(global.stage).get_theme();
-        theme.unload_stylesheet(extension.stylesheet);
+        theme.unload_stylesheet(extension.stylesheet.get_path());
     }
 
     try {
@@ -119,7 +119,7 @@
         let stylesheetFile = extension.dir.get_child(stylesheetNames[i]);
         if (stylesheetFile.query_exists(null)) {
             let theme = St.ThemeContext.get_for_stage(global.stage).get_theme();
-            theme.load_stylesheet(stylesheetFile);
+            theme.load_stylesheet(stylesheetFile.get_path());
             extension.stylesheet = stylesheetFile;
             break;
         }
diff '--exclude=.git' -urN a/js/ui/layout.js b/js/ui/layout.js
--- a/js/ui/layout.js	2017-05-11 08:45:43.000000000 -0400
+++ b/js/ui/layout.js	2017-06-13 08:18:18.014397565 -0400
@@ -11,7 +11,6 @@
 
 const Background = imports.ui.background;
 const BackgroundMenu = imports.ui.backgroundMenu;
-const LoginManager = imports.misc.loginManager;
 
 const DND = imports.ui.dnd;
 const Main = imports.ui.main;
@@ -21,6 +20,7 @@
 const STARTUP_ANIMATION_TIME = 0.5;
 const KEYBOARD_ANIMATION_TIME = 0.15;
 const BACKGROUND_FADE_ANIMATION_TIME = 1.0;
+const DEFAULT_BACKGROUND_COLOR = Clutter.Color.from_pixel(0x2e3436ff);
 
 const HOT_CORNER_PRESSURE_THRESHOLD = 100; // pixels
 const HOT_CORNER_PRESSURE_TIMEOUT = 1000; // ms
@@ -190,10 +190,10 @@
         this._isPopupWindowVisible = false;
         this._startingUp = true;
 
-        // We don't want to paint the stage background color because either
-        // the SystemBackground we create or the MetaBackgroundActor inside
-        // global.window_group covers the entirety of the screen.
-        global.stage.no_clear_hint = true;
+        // Normally, the stage is always covered so Clutter doesn't need to clear
+        // it; however it becomes visible during the startup animation
+        // See the comment below for a longer explanation
+        global.stage.background_color = DEFAULT_BACKGROUND_COLOR;
 
         // Set up stage hierarchy to group all UI actors under one container.
         this.uiGroup = new Shell.GenericContainer({ name: 'uiGroup' });
@@ -275,18 +275,6 @@
         global.screen.connect('in-fullscreen-changed',
                               Lang.bind(this, this._updateFullscreen));
         this._monitorsChanged();
-
-        // NVIDIA drivers don't preserve FBO contents across
-        // suspend/resume, see
-        // https://bugzilla.gnome.org/show_bug.cgi?id=739178
-        if (Shell.util_need_background_refresh()) {
-            LoginManager.getLoginManager().connect('prepare-for-sleep',
-                                                   function(lm, suspending) {
-                                                       if (suspending)
-                                                           return;
-                                                       Meta.Background.refresh_all();
-                                                   });
-        }
     },
 
     // This is called by Main after everything else is constructed
@@ -401,7 +389,7 @@
     },
 
     _addBackgroundMenu: function(bgManager) {
-        BackgroundMenu.addBackgroundMenu(bgManager.backgroundActor, this);
+        BackgroundMenu.addBackgroundMenu(bgManager.background.actor, this);
     },
 
     _createBackgroundManager: function(monitorIndex) {
@@ -418,10 +406,10 @@
     _showSecondaryBackgrounds: function() {
         for (let i = 0; i < this.monitors.length; i++) {
             if (i != this.primaryIndex) {
-                let backgroundActor = this._bgManagers[i].backgroundActor;
-                backgroundActor.show();
-                backgroundActor.opacity = 0;
-                Tweener.addTween(backgroundActor,
+                let background = this._bgManagers[i].background;
+                background.actor.show();
+                background.actor.opacity = 0;
+                Tweener.addTween(background.actor,
                                  { opacity: 255,
                                    time: BACKGROUND_FADE_ANIMATION_TIME,
                                    transition: 'easeOutQuad' });
@@ -444,7 +432,7 @@
             this._bgManagers.push(bgManager);
 
             if (i != this.primaryIndex && this._startingUp)
-                bgManager.backgroundActor.hide();
+                bgManager.background.actor.hide();
         }
     },
 
@@ -581,6 +569,10 @@
     //
     // When starting a normal user session, we want to grow it out of the middle
     // of the screen.
+    //
+    // Usually, we don't want to paint the stage background color because the
+    // MetaBackgroundActor inside global.window_group covers the entirety of the
+    // screen. So, we set no_clear_hint at the end of the animation.
 
     _prepareStartupAnimation: function() {
         // During the initial transition, add a simple actor to block all events,
@@ -663,6 +655,10 @@
     },
 
     _startupAnimationComplete: function() {
+        // At this point, the UI group is covering everything, so
+        // we no longer need to clear the stage
+        global.stage.no_clear_hint = true;
+
         this._coverPane.destroy();
         this._coverPane = null;
 
diff '--exclude=.git' -urN a/js/ui/magnifier.js b/js/ui/magnifier.js
--- a/js/ui/magnifier.js	2017-03-23 15:20:46.000000000 -0400
+++ b/js/ui/magnifier.js	2017-06-13 08:18:18.015397560 -0400
@@ -1227,7 +1227,12 @@
 
         // Add a background for when the magnified uiGroup is scrolled
         // out of view (don't want to see desktop showing through).
-        this._background = (new Background.SystemBackground()).actor;
+        this._background = new Clutter.Actor({ background_color: Main.DEFAULT_BACKGROUND_COLOR,
+                                               layout_manager: new Clutter.BinLayout(),
+                                               width: global.screen_width,
+                                               height: global.screen_height });
+        let noiseTexture = (new Background.SystemBackground()).actor;
+        this._background.add_actor(noiseTexture);
         mainGroup.add_actor(this._background);
 
         // Clone the group that contains all of UI on the screen.  This is the
diff '--exclude=.git' -urN a/js/ui/main.js b/js/ui/main.js
--- a/js/ui/main.js	2017-04-24 18:28:18.000000000 -0400
+++ b/js/ui/main.js	2017-06-13 08:18:18.015397560 -0400
@@ -4,7 +4,6 @@
 const Gdk = imports.gi.Gdk;
 const Gio = imports.gi.Gio;
 const GLib = imports.gi.GLib;
-const Gtk = imports.gi.Gtk;
 const Lang = imports.lang;
 const Mainloop = imports.mainloop;
 const Meta = imports.gi.Meta;
@@ -46,6 +45,8 @@
 const XdndHandler = imports.ui.xdndHandler;
 const Util = imports.misc.util;
 
+const DEFAULT_BACKGROUND_COLOR = Clutter.Color.from_pixel(0x2e3436ff);
+
 const A11Y_SCHEMA = 'org.gnome.desktop.a11y.keyboard';
 const STICKY_KEYS_ENABLE = 'stickykeys-enable';
 const GNOMESHELL_STARTED_MESSAGE_ID = 'f3ea493c22934e26811cd62abe8e203a';
@@ -87,8 +88,7 @@
 let _themeResource = null;
 
 function _sessionUpdated() {
-    if (sessionMode.isPrimary)
-        _loadDefaultStylesheet();
+    _loadDefaultStylesheet();
 
     wm.setCustomKeybindingHandler('panel-main-menu',
                                   Shell.ActionMode.NORMAL |
@@ -122,8 +122,6 @@
 
     sessionMode = new SessionMode.SessionMode();
     sessionMode.connect('updated', _sessionUpdated);
-    Gtk.Settings.get_default().connect('notify::gtk-theme-name',
-                                       _loadDefaultStylesheet);
     _initializeUI();
 
     shellAccessDialogDBusService = new AccessDialog.AccessDialogDBus();
@@ -146,7 +144,6 @@
     Shell.WindowTracker.get_default();
     Shell.AppUsage.get_default();
 
-    reloadThemeResource();
     _loadDefaultStylesheet();
 
     // Setup the stage hierarchy early
@@ -239,38 +236,12 @@
     });
 }
 
-function _getStylesheet(name) {
-    let stylesheet;
-
-    stylesheet = Gio.File.new_for_uri('resource:///org/gnome/shell/theme/' + name);
-    if (stylesheet.query_exists(null))
-        return stylesheet;
-
-    stylesheet = Gio.File.new_for_path(global.datadir + '/theme/' + name);
-    if (stylesheet.query_exists(null))
-        return stylesheet;
-
-    return null;
-}
-
-function _getDefaultStylesheet() {
-    let stylesheet = null;
-    let name = sessionMode.stylesheetName;
-
-    // Look for a high-contrast variant first when using GTK+'s HighContrast
-    // theme
-    if (Gtk.Settings.get_default().gtk_theme_name == 'HighContrast')
-        stylesheet = _getStylesheet(name.replace('.css', '-high-contrast.css'));
-
-    if (stylesheet == null)
-        stylesheet = _getStylesheet(sessionMode.stylesheetName);
-
-    return stylesheet;
-}
-
 function _loadDefaultStylesheet() {
-    let stylesheet = _getDefaultStylesheet();
-    if (_defaultCssStylesheet && _defaultCssStylesheet.equal(stylesheet))
+    if (!sessionMode.isPrimary)
+        return;
+
+    let stylesheet = global.datadir + '/theme/' + sessionMode.stylesheetName;
+    if (_defaultCssStylesheet == stylesheet)
         return;
 
     _defaultCssStylesheet = stylesheet;
@@ -297,15 +268,7 @@
  * Set the theme CSS file that the shell will load
  */
 function setThemeStylesheet(cssStylesheet) {
-    _cssStylesheet = cssStylesheet ? Gio.File.new_for_path(cssStylesheet) : null;
-}
-
-function reloadThemeResource() {
-    if (_themeResource)
-        _themeResource._unregister();
-
-    _themeResource = Gio.Resource.load(global.datadir + '/gnome-shell-theme.gresource');
-    _themeResource._register();
+    _cssStylesheet = cssStylesheet;
 }
 
 /**
diff '--exclude=.git' -urN a/js/ui/overview.js b/js/ui/overview.js
--- a/js/ui/overview.js	2017-05-11 08:45:43.000000000 -0400
+++ b/js/ui/overview.js	2017-06-13 08:18:18.015397560 -0400
@@ -179,7 +179,7 @@
         for (let i = 0; i < Main.layoutManager.monitors.length; i++) {
             let bgManager = new Background.BackgroundManager({ container: this._backgroundGroup,
                                                                monitorIndex: i,
-                                                               vignette: true });
+                                                               effects: Meta.BackgroundEffects.VIGNETTE });
             this._bgManagers.push(bgManager);
         }
     },
@@ -187,9 +187,11 @@
     _unshadeBackgrounds: function() {
         let backgrounds = this._backgroundGroup.get_children();
         for (let i = 0; i < backgrounds.length; i++) {
-            Tweener.addTween(backgrounds[i],
+            let background = backgrounds[i]._delegate;
+
+            Tweener.addTween(background,
                              { brightness: 1.0,
-                               vignette_sharpness: 0.0,
+                               vignetteSharpness: 0.0,
                                time: SHADE_ANIMATION_TIME,
                                transition: 'easeOutQuad'
                              });
@@ -199,9 +201,11 @@
     _shadeBackgrounds: function() {
         let backgrounds = this._backgroundGroup.get_children();
         for (let i = 0; i < backgrounds.length; i++) {
-            Tweener.addTween(backgrounds[i],
+            let background = backgrounds[i]._delegate;
+
+            Tweener.addTween(background,
                              { brightness: Lightbox.VIGNETTE_BRIGHTNESS,
-                               vignette_sharpness: Lightbox.VIGNETTE_SHARPNESS,
+                               vignetteSharpness: Lightbox.VIGNETTE_SHARPNESS,
                                time: SHADE_ANIMATION_TIME,
                                transition: 'easeOutQuad'
                              });
diff '--exclude=.git' -urN a/js/ui/panel.js b/js/ui/panel.js
--- a/js/ui/panel.js	2017-05-11 08:45:43.000000000 -0400
+++ b/js/ui/panel.js	2017-06-13 08:18:18.015397560 -0400
@@ -183,7 +183,7 @@
     _onStyleChanged: function(actor) {
         let node = actor.get_theme_node();
         let [success, icon] = node.lookup_url('spinner-image', false);
-        if (!success || (this._spinnerIcon && this._spinnerIcon.equal(icon)))
+        if (!success || this._spinnerIcon == icon)
             return;
         this._spinnerIcon = icon;
         this._spinner = new Animation.AnimatedIcon(this._spinnerIcon, PANEL_ICON_SIZE);
diff '--exclude=.git' -urN a/js/ui/runDialog.js b/js/ui/runDialog.js
--- a/js/ui/runDialog.js	2017-03-09 16:45:01.000000000 -0500
+++ b/js/ui/runDialog.js	2017-06-13 08:18:18.015397560 -0400
@@ -61,7 +61,6 @@
 
                                    // rt is short for "reload theme"
                                    'rt': Lang.bind(this, function() {
-                                       Main.reloadThemeResource();
                                        Main.loadTheme();
                                    })
                                  };
diff '--exclude=.git' -urN a/js/ui/status/network.js b/js/ui/status/network.js
--- a/js/ui/status/network.js	2017-04-24 18:28:18.000000000 -0400
+++ b/js/ui/status/network.js	2017-06-13 08:18:18.015397560 -0400
@@ -907,8 +907,7 @@
                                                  x_align: Clutter.ActorAlign.CENTER,
                                                  y_align: Clutter.ActorAlign.CENTER });
 
-        let file = Gio.File.new_for_uri('resource:///org/gnome/shell/theme/process-working.svg');
-        this._noNetworksSpinner = new Animation.AnimatedIcon(file, 16, 16);
+        this._noNetworksSpinner = new Animation.AnimatedIcon(global.datadir + '/theme/process-working.svg', 16, 16);
         this._noNetworksBox.add_actor(this._noNetworksSpinner.actor);
         this._noNetworksBox.add_actor(new St.Label({ style_class: 'no-networks-label',
                                                      text: _("No Networks") }));
diff '--exclude=.git' -urN a/js/ui/workspaceThumbnail.js b/js/ui/workspaceThumbnail.js
--- a/js/ui/workspaceThumbnail.js	2017-04-24 18:28:18.000000000 -0400
+++ b/js/ui/workspaceThumbnail.js	2017-06-13 08:18:18.016397555 -0400
@@ -317,7 +317,7 @@
     _createBackground: function() {
         this._bgManager = new Background.BackgroundManager({ monitorIndex: Main.layoutManager.primaryIndex,
                                                              container: this._contents,
-                                                             vignette: false });
+                                                             effects: Meta.BackgroundEffects.NONE });
     },
 
     setPorthole: function(x, y, width, height) {
@@ -343,7 +343,7 @@
             let clone = this._windows[i];
             let metaWindow = clone.metaWindow;
             if (i == 0) {
-                clone.setStackAbove(this._bgManager.backgroundActor);
+                clone.setStackAbove(this._bgManager.background.actor);
             } else {
                 let previousClone = this._windows[i - 1];
                 clone.setStackAbove(previousClone.actor);
@@ -542,7 +542,7 @@
         this._contents.add_actor(clone.actor);
 
         if (this._windows.length == 0)
-            clone.setStackAbove(this._bgManager.backgroundActor);
+            clone.setStackAbove(this._bgManager.background.actor);
         else
             clone.setStackAbove(this._windows[this._windows.length - 1].actor);
 
diff '--exclude=.git' -urN a/src/shell-util.c b/src/shell-util.c
--- a/src/shell-util.c	2017-03-09 16:45:01.000000000 -0500
+++ b/src/shell-util.c	2017-06-13 08:18:18.016397555 -0400
@@ -5,9 +5,6 @@
 #include <sys/types.h>
 #include <sys/wait.h>
 
-#include <GL/gl.h>
-#include <cogl/cogl.h>
-
 #include "shell-util.h"
 #include <glib/gi18n-lib.h>
 #include <gtk/gtk.h>
@@ -363,36 +360,6 @@
     }
 }
 
-typedef const gchar *(*ShellGLGetString) (GLenum);
-
-static const gchar *
-get_gl_vendor (void)
-{
-  static const gchar *vendor = NULL;
-
-  if (!vendor)
-    {
-      ShellGLGetString gl_get_string;
-      gl_get_string = (ShellGLGetString) cogl_get_proc_address ("glGetString");
-      if (gl_get_string)
-        vendor = gl_get_string (GL_VENDOR);
-    }
-
-  return vendor;
-}
-
-gboolean
-shell_util_need_background_refresh (void)
-{
-  if (!clutter_check_windowing_backend (CLUTTER_WINDOWING_X11))
-    return FALSE;
-
-  if (g_strcmp0 (get_gl_vendor (), "NVIDIA Corporation") == 0)
-    return TRUE;
-
-  return FALSE;
-}
-
 static gboolean
 canvas_draw_cb (ClutterContent *content,
                 cairo_t        *cr,
diff '--exclude=.git' -urN a/src/shell-util.h b/src/shell-util.h
--- a/src/shell-util.h	2017-03-09 16:45:01.000000000 -0500
+++ b/src/shell-util.h	2017-06-13 08:18:18.016397555 -0400
@@ -46,8 +46,6 @@
 void    shell_util_cursor_tracker_to_clutter (MetaCursorTracker *tracker,
                                               ClutterTexture    *texture);
 
-gboolean shell_util_need_background_refresh (void);
-
 ClutterContent * shell_util_get_content_for_window_actor (MetaWindowActor *window_actor,
                                                           MetaRectangle   *window_rect);
 
diff '--exclude=.git' -urN a/src/st/st-border-image.c b/src/st/st-border-image.c
--- a/src/st/st-border-image.c	2017-03-21 20:20:58.000000000 -0400
+++ b/src/st/st-border-image.c	2017-06-13 08:18:18.016397555 -0400
@@ -27,7 +27,7 @@
 struct _StBorderImage {
   GObject parent;
 
-  GFile *file;
+  char *filename;
   int border_top;
   int border_right;
   int border_bottom;
@@ -48,7 +48,7 @@
 {
   StBorderImage *image = ST_BORDER_IMAGE (object);
 
-  g_object_unref (image->file);
+  g_free (image->filename);
 
   G_OBJECT_CLASS (st_border_image_parent_class)->finalize (object);
 }
@@ -67,18 +67,18 @@
 }
 
 StBorderImage *
-st_border_image_new (GFile *file,
-                     int    border_top,
-                     int    border_right,
-                     int    border_bottom,
-                     int    border_left,
-                     int    scale_factor)
+st_border_image_new (const char *filename,
+                       int         border_top,
+                       int         border_right,
+                       int         border_bottom,
+                       int         border_left,
+                       int         scale_factor)
 {
   StBorderImage *image;
 
   image = g_object_new (ST_TYPE_BORDER_IMAGE, NULL);
 
-  image->file = g_object_ref (file);
+  image->filename = g_strdup (filename);
   image->border_top = border_top;
   image->border_right = border_right;
   image->border_bottom = border_bottom;
@@ -88,18 +88,12 @@
   return image;
 }
 
-/**
- * st_border_image_get_file:
- * @image: a #StBorder_Image
- *
- * Returns: (transfer none): the #GFile for the #StBorder_Image
- */
-GFile *
-st_border_image_get_file (StBorderImage *image)
+const char *
+st_border_image_get_filename (StBorderImage *image)
 {
   g_return_val_if_fail (ST_IS_BORDER_IMAGE (image), NULL);
 
-  return image->file;
+  return image->filename;
 }
 
 void
@@ -141,5 +135,5 @@
           image->border_right == other->border_right &&
           image->border_bottom == other->border_bottom &&
           image->border_left == other->border_left &&
-          g_file_equal (image->file, other->file));
+          strcmp (image->filename, other->filename) == 0);
 }
diff '--exclude=.git' -urN a/src/st/st-border-image.h b/src/st/st-border-image.h
--- a/src/st/st-border-image.h	2017-03-09 16:45:01.000000000 -0500
+++ b/src/st/st-border-image.h	2017-06-13 08:18:18.016397555 -0400
@@ -22,7 +22,6 @@
 #define __ST_BORDER_IMAGE_H__
 
 #include <glib-object.h>
-#include <gio/gio.h>
 
 G_BEGIN_DECLS
 
@@ -32,14 +31,14 @@
 #define ST_TYPE_BORDER_IMAGE             (st_border_image_get_type ())
 G_DECLARE_FINAL_TYPE (StBorderImage, st_border_image, ST, BORDER_IMAGE, GObject)
 
-StBorderImage *st_border_image_new (GFile      *file,
+StBorderImage *st_border_image_new (const char *filename,
                                     int         border_top,
                                     int         border_right,
                                     int         border_bottom,
                                     int         border_left,
                                     int         scale_factor);
 
-GFile      *st_border_image_get_file     (StBorderImage *image);
+const char *st_border_image_get_filename (StBorderImage *image);
 void        st_border_image_get_borders  (StBorderImage *image,
                                           int           *border_top,
                                           int           *border_right,
diff '--exclude=.git' -urN a/src/st/st-texture-cache.c b/src/st/st-texture-cache.c
--- a/src/st/st-texture-cache.c	2017-04-24 18:28:18.000000000 -0400
+++ b/src/st/st-texture-cache.c	2017-06-13 08:18:18.017397551 -0400
@@ -28,8 +28,8 @@
 #include <glib.h>
 
 #define CACHE_PREFIX_ICON "icon:"
-#define CACHE_PREFIX_FILE "file:"
-#define CACHE_PREFIX_FILE_FOR_CAIRO "file-for-cairo:"
+#define CACHE_PREFIX_URI "uri:"
+#define CACHE_PREFIX_URI_FOR_CAIRO "uri-for-cairo:"
 
 struct _StTextureCachePrivate
 {
@@ -101,7 +101,7 @@
                   G_SIGNAL_RUN_LAST,
                   0, /* no default handler slot */
                   NULL, NULL, NULL,
-                  G_TYPE_NONE, 1, G_TYPE_FILE);
+                  G_TYPE_NONE, 1, G_TYPE_STRING);
 }
 
 /* Evicts all cached textures for named icons */
@@ -147,7 +147,7 @@
                                                    g_free, cogl_object_unref);
   self->priv->outstanding_requests = g_hash_table_new_full (g_str_hash, g_str_equal,
                                                             g_free, NULL);
-  self->priv->file_monitors = g_hash_table_new_full (g_file_hash, (GEqualFunc) g_file_equal,
+  self->priv->file_monitors = g_hash_table_new_full (g_str_hash, g_str_equal,
                                                      g_object_unref, g_object_unref);
 
 }
@@ -268,7 +268,7 @@
 
   GtkIconInfo *icon_info;
   StIconColors *colors;
-  GFile *file;
+  char *uri;
 } AsyncTextureLoadData;
 
 static void
@@ -282,8 +282,8 @@
       if (data->colors)
         st_icon_colors_unref (data->colors);
     }
-  else if (data->file)
-    g_object_unref (data->file);
+  else if (data->uri)
+    g_free (data->uri);
 
   if (data->key)
     g_free (data->key);
@@ -406,16 +406,18 @@
 }
 
 static GdkPixbuf *
-impl_load_pixbuf_file (GFile          *file,
+impl_load_pixbuf_file (const char     *uri,
                        int             available_width,
                        int             available_height,
                        int             scale,
                        GError        **error)
 {
   GdkPixbuf *pixbuf = NULL;
+  GFile *file;
   char *contents = NULL;
   gsize size;
 
+  file = g_file_new_for_uri (uri);
   if (g_file_load_contents (file, NULL, &contents, &size, NULL, error))
     {
       pixbuf = impl_load_pixbuf_data ((const guchar *) contents, size,
@@ -424,6 +426,7 @@
                                       error);
     }
 
+  g_object_unref (file);
   g_free (contents);
 
   return pixbuf;
@@ -440,9 +443,9 @@
   GError *error = NULL;
 
   g_assert (data != NULL);
-  g_assert (data->file != NULL);
+  g_assert (data->uri != NULL);
 
-  pixbuf = impl_load_pixbuf_file (data->file, data->width, data->height, data->scale, &error);
+  pixbuf = impl_load_pixbuf_file (data->uri, data->width, data->height, data->scale, &error);
 
   if (error != NULL)
     g_task_return_error (result, error);
@@ -584,7 +587,7 @@
 load_texture_async (StTextureCache       *cache,
                     AsyncTextureLoadData *data)
 {
-  if (data->file)
+  if (data->uri)
     {
       GTask *task = g_task_new (cache, NULL, on_pixbuf_loaded, data);
       g_task_set_task_data (task, data, NULL);
@@ -973,49 +976,46 @@
                  gpointer           user_data)
 {
   StTextureCache *cache = user_data;
-  char *key;
-  guint file_hash;
+  char *uri, *key;
 
   if (event_type != G_FILE_MONITOR_EVENT_CHANGED)
     return;
 
-  file_hash = g_file_hash (file);
+  uri = g_file_get_uri (file);
 
-  key = g_strdup_printf (CACHE_PREFIX_FILE "%u", file_hash);
+  key = g_strconcat (CACHE_PREFIX_URI, uri, NULL);
   g_hash_table_remove (cache->priv->keyed_cache, key);
   g_free (key);
 
-  key = g_strdup_printf (CACHE_PREFIX_FILE_FOR_CAIRO "%u", file_hash);
+  key = g_strconcat (CACHE_PREFIX_URI_FOR_CAIRO, uri, NULL);
   g_hash_table_remove (cache->priv->keyed_cache, key);
   g_free (key);
 
-  g_signal_emit (cache, signals[TEXTURE_FILE_CHANGED], 0, file);
+  g_signal_emit (cache, signals[TEXTURE_FILE_CHANGED], 0, uri);
+
+  g_free (uri);
 }
 
 static void
-ensure_monitor_for_file (StTextureCache *cache,
-                         GFile          *file)
+ensure_monitor_for_uri (StTextureCache *cache,
+                        const gchar    *uri)
 {
   StTextureCachePrivate *priv = cache->priv;
+  GFile *file = g_file_new_for_uri (uri);
 
-  /* No point in trying to monitor files that are part of a
-   * GResource, since it does not support file monitoring.
-   */
-  if (g_file_has_uri_scheme (file, "resource"))
-    return;
-
-  if (g_hash_table_lookup (priv->file_monitors, file) == NULL)
+  if (g_hash_table_lookup (priv->file_monitors, uri) == NULL)
     {
       GFileMonitor *monitor = g_file_monitor_file (file, G_FILE_MONITOR_NONE,
                                                    NULL, NULL);
       g_signal_connect (monitor, "changed",
                         G_CALLBACK (file_changed_cb), cache);
-      g_hash_table_insert (priv->file_monitors, g_object_ref (file), monitor);
+      g_hash_table_insert (priv->file_monitors, g_strdup (uri), monitor);
     }
+  g_object_unref (file);
 }
 
 typedef struct {
-  GFile *gfile;
+  gchar *path;
   gint   grid_width, grid_height;
   gint   scale_factor;
   ClutterActor *actor;
@@ -1027,7 +1027,7 @@
 on_data_destroy (gpointer data)
 {
   AsyncImageData *d = (AsyncImageData *)data;
-  g_object_unref (d->gfile);
+  g_free (d->path);
   g_object_unref (d->actor);
   g_free (d);
 }
@@ -1101,7 +1101,7 @@
   loader = gdk_pixbuf_loader_new ();
   g_signal_connect (loader, "size-prepared", G_CALLBACK (on_loader_size_prepared), data);
 
-  if (!g_file_load_contents (data->gfile, NULL, &buffer, &length, NULL, &error))
+  if (!g_file_get_contents (data->path, &buffer, &length, &error))
     {
       g_warning ("Failed to open sliced image: %s", error->message);
       goto out;
@@ -1143,7 +1143,7 @@
 /**
  * st_texture_cache_load_sliced_image:
  * @cache: A #StTextureCache
- * @file: A #GFile
+ * @path: Path to a filename
  * @grid_width: Width in pixels
  * @grid_height: Height in pixels
  * @scale: Scale factor of the display
@@ -1159,7 +1159,7 @@
  */
 ClutterActor *
 st_texture_cache_load_sliced_image (StTextureCache *cache,
-                                    GFile          *file,
+                                    const gchar    *path,
                                     gint            grid_width,
                                     gint            grid_height,
                                     gint            scale,
@@ -1174,7 +1174,7 @@
   data->grid_width = grid_width;
   data->grid_height = grid_height;
   data->scale_factor = scale;
-  data->gfile = g_object_ref (file);
+  data->path = g_strdup (path);
   data->actor = actor;
   data->load_callback = load_callback;
   data->load_callback_data = user_data;
@@ -1190,9 +1190,9 @@
 }
 
 /**
- * st_texture_cache_load_file_async:
+ * st_texture_cache_load_uri_async:
  * @cache: The texture cache instance
- * @file: a #GFile of the image file from which to create a pixbuf
+ * @uri: uri of the image file from which to create a pixbuf
  * @available_width: available width for the image, can be -1 if not limited
  * @available_height: available height for the image, can be -1 if not limited
  * @scale: scale factor of the display
@@ -1204,18 +1204,18 @@
  * Return value: (transfer none): A new #ClutterActor with no image loaded initially.
  */
 ClutterActor *
-st_texture_cache_load_file_async (StTextureCache *cache,
-                                  GFile          *file,
-                                  int             available_width,
-                                  int             available_height,
-                                  int             scale)
+st_texture_cache_load_uri_async (StTextureCache *cache,
+                                 const gchar    *uri,
+                                 int             available_width,
+                                 int             available_height,
+                                 int             scale)
 {
   ClutterActor *texture;
   AsyncTextureLoadData *request;
   StTextureCachePolicy policy;
   gchar *key;
 
-  key = g_strdup_printf (CACHE_PREFIX_FILE "%u", g_file_hash (file));
+  key = g_strconcat (CACHE_PREFIX_URI, uri, NULL);
 
   policy = ST_TEXTURE_CACHE_POLICY_NONE; /* XXX */
 
@@ -1233,7 +1233,7 @@
       request->cache = cache;
       /* Transfer ownership of key */
       request->key = key;
-      request->file = g_object_ref (file);
+      request->uri = g_strdup (uri);
       request->policy = policy;
       request->width = available_width;
       request->height = available_height;
@@ -1242,31 +1242,31 @@
       load_texture_async (cache, request);
     }
 
-  ensure_monitor_for_file (cache, file);
+  ensure_monitor_for_uri (cache, uri);
 
   return CLUTTER_ACTOR (texture);
 }
 
 static CoglTexture *
-st_texture_cache_load_file_sync_to_cogl_texture (StTextureCache *cache,
-                                                 StTextureCachePolicy policy,
-                                                 GFile          *file,
-                                                 int             available_width,
-                                                 int             available_height,
-                                                 int             scale,
-                                                 GError         **error)
+st_texture_cache_load_uri_sync_to_cogl_texture (StTextureCache *cache,
+                                                StTextureCachePolicy policy,
+                                                const gchar    *uri,
+                                                int             available_width,
+                                                int             available_height,
+                                                int             scale,
+                                                GError         **error)
 {
   CoglTexture *texdata;
   GdkPixbuf *pixbuf;
   char *key;
 
-  key = g_strdup_printf (CACHE_PREFIX_FILE "%u", g_file_hash (file));
+  key = g_strconcat (CACHE_PREFIX_URI, uri, NULL);
 
   texdata = g_hash_table_lookup (cache->priv->keyed_cache, key);
 
   if (texdata == NULL)
     {
-      pixbuf = impl_load_pixbuf_file (file, available_width, available_height, scale, error);
+      pixbuf = impl_load_pixbuf_file (uri, available_width, available_height, scale, error);
       if (!pixbuf)
         goto out;
 
@@ -1282,7 +1282,7 @@
   else
     cogl_object_ref (texdata);
 
-  ensure_monitor_for_file (cache, file);
+  ensure_monitor_for_uri (cache, uri);
 
 out:
   g_free (key);
@@ -1290,25 +1290,25 @@
 }
 
 static cairo_surface_t *
-st_texture_cache_load_file_sync_to_cairo_surface (StTextureCache        *cache,
-                                                  StTextureCachePolicy   policy,
-                                                  GFile                 *file,
-                                                  int                    available_width,
-                                                  int                    available_height,
-                                                  int                    scale,
-                                                  GError               **error)
+st_texture_cache_load_uri_sync_to_cairo_surface (StTextureCache        *cache,
+                                                 StTextureCachePolicy   policy,
+                                                 const gchar           *uri,
+                                                 int                    available_width,
+                                                 int                    available_height,
+                                                 int                    scale,
+                                                 GError               **error)
 {
   cairo_surface_t *surface;
   GdkPixbuf *pixbuf;
   char *key;
 
-  key = g_strdup_printf (CACHE_PREFIX_FILE_FOR_CAIRO "%u", g_file_hash (file));
+  key = g_strconcat (CACHE_PREFIX_URI_FOR_CAIRO, uri, NULL);
 
   surface = g_hash_table_lookup (cache->priv->keyed_cache, key);
 
   if (surface == NULL)
     {
-      pixbuf = impl_load_pixbuf_file (file, available_width, available_height, scale, error);
+      pixbuf = impl_load_pixbuf_file (uri, available_width, available_height, scale, error);
       if (!pixbuf)
         goto out;
 
@@ -1324,7 +1324,7 @@
   else
     cairo_surface_reference (surface);
 
-  ensure_monitor_for_file (cache, file);
+  ensure_monitor_for_uri (cache, uri);
 
 out:
   g_free (key);
@@ -1334,7 +1334,7 @@
 /**
  * st_texture_cache_load_file_to_cogl_texture: (skip)
  * @cache: A #StTextureCache
- * @file: A #GFile in supported image format
+ * @file_path: Path to a file in supported image format
  * @scale: Scale factor of the display
  *
  * This function synchronously loads the given file path
@@ -1345,30 +1345,35 @@
  */
 CoglTexture *
 st_texture_cache_load_file_to_cogl_texture (StTextureCache *cache,
-                                            GFile          *file,
+                                            const gchar    *file_path,
                                             gint            scale)
 {
   CoglTexture *texture;
+  GFile *file;
+  char *uri;
   GError *error = NULL;
 
-  texture = st_texture_cache_load_file_sync_to_cogl_texture (cache, ST_TEXTURE_CACHE_POLICY_FOREVER,
-                                                             file, -1, -1, scale, &error);
+  file = g_file_new_for_path (file_path);
+  uri = g_file_get_uri (file);
+
+  texture = st_texture_cache_load_uri_sync_to_cogl_texture (cache, ST_TEXTURE_CACHE_POLICY_FOREVER,
+                                                            uri, -1, -1, scale, &error);
+  g_object_unref (file);
+  g_free (uri);
 
   if (texture == NULL)
     {
-      char *uri = g_file_get_uri (file);
-      g_warning ("Failed to load %s: %s", uri, error->message);
+      g_warning ("Failed to load %s: %s", file_path, error->message);
       g_clear_error (&error);
-      g_free (uri);
+      return NULL;
     }
-
   return texture;
 }
 
 /**
  * st_texture_cache_load_file_to_cairo_surface:
  * @cache: A #StTextureCache
- * @file: A #GFile in supported image format
+ * @file_path: Path to a file in supported image format
  * @scale: Scale factor of the display
  *
  * This function synchronously loads the given file path
@@ -1379,23 +1384,28 @@
  */
 cairo_surface_t *
 st_texture_cache_load_file_to_cairo_surface (StTextureCache *cache,
-                                             GFile          *file,
+                                             const gchar    *file_path,
                                              gint            scale)
 {
   cairo_surface_t *surface;
+  GFile *file;
+  char *uri;
   GError *error = NULL;
 
-  surface = st_texture_cache_load_file_sync_to_cairo_surface (cache, ST_TEXTURE_CACHE_POLICY_FOREVER,
-                                                              file, -1, -1, scale, &error);
+  file = g_file_new_for_path (file_path);
+  uri = g_file_get_uri (file);
+
+  surface = st_texture_cache_load_uri_sync_to_cairo_surface (cache, ST_TEXTURE_CACHE_POLICY_FOREVER,
+                                                             uri, -1, -1, scale, &error);
+  g_object_unref (file);
+  g_free (uri);
 
   if (surface == NULL)
     {
-      char *uri = g_file_get_uri (file);
-      g_warning ("Failed to load %s: %s", uri, error->message);
+      g_warning ("Failed to load %s: %s", file_path, error->message);
       g_clear_error (&error);
-      g_free (uri);
+      return NULL;
     }
-
   return surface;
 }
 
diff '--exclude=.git' -urN a/src/st/st-texture-cache.h b/src/st/st-texture-cache.h
--- a/src/st/st-texture-cache.h	2017-03-09 16:45:01.000000000 -0500
+++ b/src/st/st-texture-cache.h	2017-06-13 08:18:18.017397551 -0400
@@ -55,7 +55,7 @@
 
 ClutterActor *
 st_texture_cache_load_sliced_image (StTextureCache *cache,
-                                    GFile          *file,
+                                    const gchar    *path,
                                     gint            grid_width,
                                     gint            grid_height,
                                     gint            scale,
@@ -72,18 +72,18 @@
                                            gint            size,
                                            gint            scale);
 
-ClutterActor *st_texture_cache_load_file_async (StTextureCache    *cache,
-                                                GFile             *file,
-                                                int                available_width,
-                                                int                available_height,
-                                                int                scale);
+ClutterActor *st_texture_cache_load_uri_async (StTextureCache    *cache,
+                                               const gchar       *uri,
+                                               int                available_width,
+                                               int                available_height,
+                                               int                scale);
 
 CoglTexture     *st_texture_cache_load_file_to_cogl_texture (StTextureCache *cache,
-                                                             GFile          *file,
+                                                             const gchar    *file_path,
                                                              gint            scale);
 
 cairo_surface_t *st_texture_cache_load_file_to_cairo_surface (StTextureCache *cache,
-                                                              GFile          *file,
+                                                              const gchar    *file_path,
                                                               gint            scale);
 
 /**
diff '--exclude=.git' -urN a/src/st/st-theme-node-drawing.c b/src/st/st-theme-node-drawing.c
--- a/src/st/st-theme-node-drawing.c	2017-04-24 18:28:18.000000000 -0400
+++ b/src/st/st-theme-node-drawing.c	2017-06-13 08:18:18.017397551 -0400
@@ -620,7 +620,7 @@
   cairo_pattern_t *pattern;
   cairo_content_t  content;
   cairo_matrix_t   matrix;
-  GFile *file;
+  const char *file;
 
   StTextureCache *texture_cache;
 
@@ -1063,7 +1063,7 @@
     }
   else
     {
-      GFile *background_image;
+      const char *background_image;
 
       background_image = st_theme_node_get_background_image (node);
 
@@ -1331,19 +1331,19 @@
   if (node->border_slices_texture == COGL_INVALID_HANDLE)
     {
       StBorderImage *border_image;
-      GFile *file;
+      const char *filename;
       int scale_factor;
 
       border_image = st_theme_node_get_border_image (node);
       if (border_image == NULL)
         goto out;
 
-      file = st_border_image_get_file (border_image);
+      filename = st_border_image_get_filename (border_image);
 
       g_object_get (node->context, "scale-factor", &scale_factor, NULL);
 
       node->border_slices_texture = st_texture_cache_load_file_to_cogl_texture (st_texture_cache_get_default (),
-                                                                                file, scale_factor);
+                                                                                filename, scale_factor);
       if (node->border_slices_texture == COGL_INVALID_HANDLE)
         goto out;
 
@@ -1381,7 +1381,7 @@
 {
   if (node->background_texture == COGL_INVALID_HANDLE)
     {
-      GFile *background_image;
+      const char *background_image;
       StShadow *background_image_shadow_spec;
       int scale_factor;
 
diff '--exclude=.git' -urN a/src/st/st-theme-node-private.h b/src/st/st-theme-node-private.h
--- a/src/st/st-theme-node-private.h	2017-03-09 16:45:01.000000000 -0500
+++ b/src/st/st-theme-node-private.h	2017-06-13 08:18:18.017397551 -0400
@@ -70,7 +70,7 @@
 
   int transition_duration;
 
-  GFile *background_image;
+  char *background_image;
   StBorderImage *border_image;
   StShadow *box_shadow;
   StShadow *background_image_shadow;
diff '--exclude=.git' -urN a/src/st/st-theme-node.c b/src/st/st-theme-node.c
--- a/src/st/st-theme-node.c	2017-04-24 18:28:18.000000000 -0400
+++ b/src/st/st-theme-node.c	2017-06-13 08:18:18.018397546 -0400
@@ -165,10 +165,7 @@
     }
 
   if (node->background_image)
-    {
-      g_object_unref (node->background_image);
-      node->background_image = NULL;
-    }
+    g_free (node->background_image);
 
   if (node->background_texture != COGL_INVALID_HANDLE)
     cogl_handle_unref (node->background_texture);
@@ -915,7 +912,7 @@
  *   parent's parent, and so forth. Note that if the property has a
  *   value of 'inherit' it will be inherited even if %FALSE is passed
  *   in for @inherit; this only affects the default behavior for inheritance.
- * @file: (out) (transfer full): location to store the newly allocated value that was
+ * @value: (out): location to store the newly allocated value that was
  *   determined. If the property is not found, the value in this location
  *   will not be changed.
  *
@@ -930,7 +927,7 @@
 st_theme_node_lookup_url (StThemeNode  *node,
                           const char   *property_name,
                           gboolean      inherit,
-                          GFile       **file)
+                          char        **value)
 {
   gboolean result = FALSE;
   int i;
@@ -945,6 +942,7 @@
         {
           CRTerm *term = decl->value;
           CRStyleSheet *base_stylesheet;
+          GFile *file;
 
           if (term->type != TERM_URI && term->type != TERM_STRING)
             continue;
@@ -954,21 +952,23 @@
           else
             base_stylesheet = NULL;
 
-          *file = _st_theme_resolve_url (node->theme,
-                                         base_stylesheet,
-                                         decl->value->content.str->stryng->str);
+          file = _st_theme_resolve_url (node->theme,
+                                        base_stylesheet,
+                                        decl->value->content.str->stryng->str);
+          *value = g_file_get_path (file);
+          g_object_unref (file);
           result = TRUE;
           break;
         }
     }
 
   if (!result && inherit && node->parent_node)
-    result = st_theme_node_lookup_url (node->parent_node, property_name, inherit, file);
+    result = st_theme_node_lookup_url (node->parent_node, property_name, inherit, value);
 
   return result;
 }
 
-/**
+/*
  * st_theme_node_get_url:
  * @node: a #StThemeNode
  * @property_name: The name of the string property
@@ -979,18 +979,18 @@
  * and lets you handle the case where the theme does not specify the
  * indicated value.
  *
- * Returns: (transfer full): the newly allocated value if found.
+ * Return value: the newly allocated value if found.
  *  If @property_name is not found, a warning will be logged and %NULL
  *  will be returned.
  */
-GFile *
+char *
 st_theme_node_get_url (StThemeNode *node,
                        const char  *property_name)
 {
-  GFile *file;
+  char *value;
 
-  if (st_theme_node_lookup_url (node, property_name, FALSE, &file))
-    return file;
+  if (st_theme_node_lookup_url (node, property_name, FALSE, &value))
+    return value;
   else
     {
       g_warning ("Did not find string property '%s'", property_name);
@@ -2019,7 +2019,8 @@
           CRTerm *term;
           /* background: property sets all terms to specified or default values */
           node->background_color = TRANSPARENT_COLOR;
-          g_clear_object (&node->background_image);
+          g_free (node->background_image);
+          node->background_image = NULL;
           node->background_position_set = FALSE;
           node->background_size = ST_BACKGROUND_SIZE_AUTO;
 
@@ -2035,7 +2036,7 @@
                   if (node->parent_node)
                     {
                       st_theme_node_get_background_color (node->parent_node, &node->background_color);
-                      node->background_image = g_object_ref (st_theme_node_get_background_image (node->parent_node));
+                      node->background_image = g_strdup (st_theme_node_get_background_image (node->parent_node));
                     }
                 }
               else if (term_is_none (term))
@@ -2056,7 +2057,8 @@
                                                 base_stylesheet,
                                                 term->content.str->stryng->str);
 
-                  node->background_image = file;
+                  node->background_image = g_file_get_path (file);
+                  g_object_unref (file);
                 }
             }
         }
@@ -2153,25 +2155,30 @@
           if (decl->value->type == TERM_URI)
             {
               CRStyleSheet *base_stylesheet;
+              GFile *file;
 
               if (decl->parent_statement != NULL)
                 base_stylesheet = decl->parent_statement->parent_sheet;
               else
                 base_stylesheet = NULL;
 
-              g_clear_object (&node->background_image);
-              node->background_image = _st_theme_resolve_url (node->theme,
-                                                              base_stylesheet,
-                                                              decl->value->content.str->stryng->str);
+              g_free (node->background_image);
+              file = _st_theme_resolve_url (node->theme,
+                                            base_stylesheet,
+                                            decl->value->content.str->stryng->str);
+
+              node->background_image = g_file_get_path (file);
+              g_object_unref (file);
             }
           else if (term_is_inherit (decl->value))
             {
-              g_clear_object (&node->background_image);
-              node->background_image = g_object_ref (st_theme_node_get_background_image (node->parent_node));
+              g_free (node->background_image);
+              node->background_image = g_strdup (st_theme_node_get_background_image (node->parent_node));
             }
           else if (term_is_none (decl->value))
             {
-              g_clear_object (&node->background_image);
+              g_free (node->background_image);
+              node->background_image = NULL;
             }
         }
       else if (strcmp (property_name, "-gradient-direction") == 0)
@@ -2228,13 +2235,7 @@
   *color = node->background_color;
 }
 
-/**
- * st_theme_node_get_background_image:
- * @node: a #StThemeNode
- *
- * Returns: (transfer none): @node's background image.
- */
-GFile *
+const char *
 st_theme_node_get_background_image (StThemeNode *node)
 {
   g_return_val_if_fail (ST_IS_THEME_NODE (node), NULL);
@@ -3040,6 +3041,7 @@
           int border_left;
 
           GFile *file;
+          char *filename;
 
           /* Support border-image: none; to suppress a previously specified border image */
           if (term_is_none (term))
@@ -3118,15 +3120,17 @@
             base_stylesheet = NULL;
 
           file = _st_theme_resolve_url (node->theme, base_stylesheet, url);
+          filename = g_file_get_path (file);
+          g_object_unref (file);
 
-          if (file == NULL)
+          if (filename == NULL)
             goto next_property;
 
-          node->border_image = st_border_image_new (file,
+          node->border_image = st_border_image_new (filename,
                                                     border_top, border_right, border_bottom, border_left,
                                                     scale_factor);
 
-          g_object_unref (file);
+          g_free (filename);
 
           return node->border_image;
         }
@@ -4016,9 +4020,7 @@
       !clutter_color_equal (&node->background_gradient_end, &other->background_gradient_end))
     return FALSE;
 
-  if ((node->background_image != NULL) &&
-      (other->background_image != NULL) &&
-      !g_file_equal (node->background_image, other->background_image))
+  if (g_strcmp0 (node->background_image, other->background_image) != 0)
     return FALSE;
 
   _st_theme_node_ensure_geometry (node);
diff '--exclude=.git' -urN a/src/st/st-theme-node.h b/src/st/st-theme-node.h
--- a/src/st/st-theme-node.h	2017-03-09 16:45:01.000000000 -0500
+++ b/src/st/st-theme-node.h	2017-06-13 08:18:18.018397546 -0400
@@ -159,7 +159,7 @@
 gboolean st_theme_node_lookup_url    (StThemeNode  *node,
                                       const char   *property_name,
                                       gboolean      inherit,
-                                      GFile       **file);
+                                      char        **value);
 
 /* Easier-to-use variants of the above, for application-level use */
 void          st_theme_node_get_color  (StThemeNode  *node,
@@ -171,7 +171,7 @@
                                         const char   *property_name);
 StShadow     *st_theme_node_get_shadow (StThemeNode  *node,
                                         const char   *property_name);
-GFile        *st_theme_node_get_url    (StThemeNode  *node,
+char         *st_theme_node_get_url    (StThemeNode  *node,
                                         const char   *property_name);
 
 /* Specific getters for particular properties: cached
@@ -185,7 +185,7 @@
                                             ClutterColor   *start,
                                             ClutterColor   *end);
 
-GFile *st_theme_node_get_background_image (StThemeNode *node);
+const char *st_theme_node_get_background_image (StThemeNode *node);
 
 int    st_theme_node_get_border_width  (StThemeNode  *node,
                                         StSide        side);
diff '--exclude=.git' -urN a/src/st/st-theme.c b/src/st/st-theme.c
--- a/src/st/st-theme.c	2017-03-09 16:45:01.000000000 -0500
+++ b/src/st/st-theme.c	2017-06-13 08:18:18.018397546 -0400
@@ -60,13 +60,13 @@
 {
   GObject parent;
 
-  GFile *application_stylesheet;
-  GFile *default_stylesheet;
-  GFile *theme_stylesheet;
+  char *application_stylesheet;
+  char *default_stylesheet;
+  char *theme_stylesheet;
   GSList *custom_stylesheets;
 
-  GHashTable *stylesheets_by_file;
-  GHashTable *files_by_stylesheet;
+  GHashTable *stylesheets_by_filename;
+  GHashTable *filenames_by_stylesheet;
 
   CRCascade *cascade;
 };
@@ -93,25 +93,12 @@
 #define strqcmp(str,lit,lit_len) \
   (strlen (str) != (lit_len) || memcmp (str, lit, lit_len))
 
-static gboolean
-file_equal0 (GFile *file1,
-             GFile *file2)
-{
-  if (file1 == file2)
-    return TRUE;
-
-  if ((file1 == NULL) || (file2 == NULL))
-    return FALSE;
-
-  return g_file_equal (file1, file2);
-}
-
 static void
 st_theme_init (StTheme *theme)
 {
-  theme->stylesheets_by_file = g_hash_table_new_full (g_file_hash, (GEqualFunc) g_file_equal,
-                                                      (GDestroyNotify)g_object_unref, (GDestroyNotify)cr_stylesheet_unref);
-  theme->files_by_stylesheet = g_hash_table_new (g_direct_hash, g_direct_equal);
+  theme->stylesheets_by_filename = g_hash_table_new_full (g_str_hash, g_str_equal,
+                                                          (GDestroyNotify)g_free, (GDestroyNotify)cr_stylesheet_unref);
+  theme->filenames_by_stylesheet = g_hash_table_new (g_direct_hash, g_direct_equal);
 }
 
 static void
@@ -132,10 +119,10 @@
    */
   g_object_class_install_property (object_class,
                                    PROP_APPLICATION_STYLESHEET,
-                                   g_param_spec_object ("application-stylesheet",
+                                   g_param_spec_string ("application-stylesheet",
                                                         "Application Stylesheet",
                                                         "Stylesheet with application-specific styling",
-                                                        G_TYPE_FILE,
+                                                        NULL,
                                                         G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
 
   /**
@@ -146,10 +133,10 @@
    */
   g_object_class_install_property (object_class,
                                    PROP_THEME_STYLESHEET,
-                                   g_param_spec_object ("theme-stylesheet",
+                                   g_param_spec_string ("theme-stylesheet",
                                                         "Theme Stylesheet",
                                                         "Stylesheet with theme-specific styling",
-                                                        G_TYPE_FILE,
+                                                        NULL,
                                                         G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
 
   /**
@@ -160,10 +147,10 @@
    */
   g_object_class_install_property (object_class,
                                    PROP_DEFAULT_STYLESHEET,
-                                   g_param_spec_object ("default-stylesheet",
+                                   g_param_spec_string ("default-stylesheet",
                                                         "Default Stylesheet",
                                                         "Stylesheet with global default styling",
-                                                        G_TYPE_FILE,
+                                                        NULL,
                                                         G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
 
   signals[STYLESHEETS_CHANGED] =
@@ -176,32 +163,23 @@
 }
 
 static CRStyleSheet *
-parse_stylesheet (GFile   *file,
-                  GError **error)
+parse_stylesheet (const char  *filename,
+                  GError     **error)
 {
   enum CRStatus status;
   CRStyleSheet *stylesheet;
-  char *contents;
-  gsize length;
 
-  if (file == NULL)
+  if (filename == NULL)
     return NULL;
 
-  if (!g_file_load_contents (file, NULL, &contents, &length, NULL, error))
-    return NULL;
-
-  status = cr_om_parser_simply_parse_buf ((const guchar *) contents,
-                                          length,
-                                          CR_UTF_8,
-                                          &stylesheet);
-  g_free (contents);
+  status = cr_om_parser_simply_parse_file ((const guchar *) filename,
+                                           CR_UTF_8,
+                                           &stylesheet);
 
   if (status != CR_OK)
     {
-      char *uri = g_file_get_uri (file);
       g_set_error (error, G_IO_ERROR, G_IO_ERROR_FAILED,
-                   "Error parsing stylesheet '%s'; errcode:%d", uri, status);
-      g_free (uri);
+                   "Error parsing stylesheet '%s'; errcode:%d", filename, status);
       return NULL;
     }
 
@@ -220,12 +198,12 @@
 
 /* Just g_warning for now until we have something nicer to do */
 static CRStyleSheet *
-parse_stylesheet_nofail (GFile *file)
+parse_stylesheet_nofail (const char *filename)
 {
   GError *error = NULL;
   CRStyleSheet *result;
 
-  result = parse_stylesheet (file, &error);
+  result = parse_stylesheet (filename, &error);
   if (error)
     {
       g_warning ("%s", error->message);
@@ -236,33 +214,35 @@
 
 static void
 insert_stylesheet (StTheme      *theme,
-                   GFile        *file,
+                   const char   *filename,
                    CRStyleSheet *stylesheet)
 {
+  char *filename_copy;
+
   if (stylesheet == NULL)
     return;
 
-  g_object_ref (file);
+  filename_copy = g_strdup(filename);
   cr_stylesheet_ref (stylesheet);
 
-  g_hash_table_insert (theme->stylesheets_by_file, file, stylesheet);
-  g_hash_table_insert (theme->files_by_stylesheet, stylesheet, file);
+  g_hash_table_insert (theme->stylesheets_by_filename, filename_copy, stylesheet);
+  g_hash_table_insert (theme->filenames_by_stylesheet, stylesheet, filename_copy);
 }
 
 gboolean
 st_theme_load_stylesheet (StTheme    *theme,
-                          GFile      *file,
+                          const char *path,
                           GError    **error)
 {
   CRStyleSheet *stylesheet;
 
-  stylesheet = parse_stylesheet (file, error);
+  stylesheet = parse_stylesheet (path, error);
   if (!stylesheet)
     return FALSE;
 
   stylesheet->app_data = GUINT_TO_POINTER (TRUE);
 
-  insert_stylesheet (theme, file, stylesheet);
+  insert_stylesheet (theme, path, stylesheet);
   cr_stylesheet_ref (stylesheet);
   theme->custom_stylesheets = g_slist_prepend (theme->custom_stylesheets, stylesheet);
   g_signal_emit (theme, signals[STYLESHEETS_CHANGED], 0);
@@ -272,11 +252,11 @@
 
 void
 st_theme_unload_stylesheet (StTheme    *theme,
-                            GFile      *file)
+                            const char *path)
 {
   CRStyleSheet *stylesheet;
 
-  stylesheet = g_hash_table_lookup (theme->stylesheets_by_file, file);
+  stylesheet = g_hash_table_lookup (theme->stylesheets_by_filename, path);
   if (!stylesheet)
     return;
 
@@ -284,8 +264,8 @@
     return;
 
   theme->custom_stylesheets = g_slist_remove (theme->custom_stylesheets, stylesheet);
-  g_hash_table_remove (theme->stylesheets_by_file, file);
-  g_hash_table_remove (theme->files_by_stylesheet, stylesheet);
+  g_hash_table_remove (theme->stylesheets_by_filename, path);
+  g_hash_table_remove (theme->filenames_by_stylesheet, stylesheet);
   cr_stylesheet_unref (stylesheet);
   g_signal_emit (theme, signals[STYLESHEETS_CHANGED], 0);
 }
@@ -294,7 +274,7 @@
  * st_theme_get_custom_stylesheets:
  * @theme: an #StTheme
  *
- * Returns: (transfer full) (element-type GFile): the list of stylesheet files
+ * Returns: (transfer full) (element-type utf8): the list of stylesheet filenames
  *          that were loaded with st_theme_load_stylesheet()
  */
 GSList*
@@ -306,9 +286,9 @@
   for (iter = theme->custom_stylesheets; iter; iter = iter->next)
     {
       CRStyleSheet *stylesheet = iter->data;
-      GFile *file = g_hash_table_lookup (theme->files_by_stylesheet, stylesheet);
+      gchar *filename = g_hash_table_lookup (theme->filenames_by_stylesheet, stylesheet);
 
-      result = g_slist_prepend (result, g_object_ref (file));
+      result = g_slist_prepend (result, g_strdup (filename));
     }
 
   return result;
@@ -349,12 +329,12 @@
   g_slist_free (theme->custom_stylesheets);
   theme->custom_stylesheets = NULL;
 
-  g_hash_table_destroy (theme->stylesheets_by_file);
-  g_hash_table_destroy (theme->files_by_stylesheet);
+  g_hash_table_destroy (theme->stylesheets_by_filename);
+  g_hash_table_destroy (theme->filenames_by_stylesheet);
 
-  g_clear_object (&theme->application_stylesheet);
-  g_clear_object (&theme->theme_stylesheet);
-  g_clear_object (&theme->default_stylesheet);
+  g_free (theme->application_stylesheet);
+  g_free (theme->theme_stylesheet);
+  g_free (theme->default_stylesheet);
 
   if (theme->cascade)
     {
@@ -377,39 +357,36 @@
     {
     case PROP_APPLICATION_STYLESHEET:
       {
-        GFile *file = g_value_get_object (value);
+        const char *path = g_value_get_string (value);
 
-        if (!file_equal0 (file, theme->application_stylesheet))
+        if (path != theme->application_stylesheet)
           {
-            g_clear_object (&theme->application_stylesheet);
-            if (file != NULL)
-              theme->application_stylesheet = g_object_ref (file);
+            g_free (theme->application_stylesheet);
+            theme->application_stylesheet = g_strdup (path);
           }
 
         break;
       }
     case PROP_THEME_STYLESHEET:
       {
-        GFile *file = g_value_get_object (value);
+        const char *path = g_value_get_string (value);
 
-        if (!file_equal0 (file, theme->theme_stylesheet))
+        if (path != theme->theme_stylesheet)
           {
-            g_clear_object (&theme->theme_stylesheet);
-            if (file != NULL)
-              theme->theme_stylesheet = g_object_ref (file);
+            g_free (theme->theme_stylesheet);
+            theme->theme_stylesheet = g_strdup (path);
           }
 
         break;
       }
     case PROP_DEFAULT_STYLESHEET:
       {
-        GFile *file = g_value_get_object (value);
+        const char *path = g_value_get_string (value);
 
-        if (!file_equal0 (file, theme->default_stylesheet))
+        if (path != theme->default_stylesheet)
           {
-            g_clear_object (&theme->default_stylesheet);
-            if (file != NULL)
-              theme->default_stylesheet = g_object_ref (file);
+            g_free (theme->default_stylesheet);
+            theme->default_stylesheet = g_strdup (path);
           }
 
         break;
@@ -431,13 +408,13 @@
   switch (prop_id)
     {
     case PROP_APPLICATION_STYLESHEET:
-      g_value_set_object (value, theme->application_stylesheet);
+      g_value_set_string (value, theme->application_stylesheet);
       break;
     case PROP_THEME_STYLESHEET:
-      g_value_set_object (value, theme->theme_stylesheet);
+      g_value_set_string (value, theme->theme_stylesheet);
       break;
     case PROP_DEFAULT_STYLESHEET:
-      g_value_set_object (value, theme->default_stylesheet);
+      g_value_set_string (value, theme->default_stylesheet);
       break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
@@ -457,9 +434,9 @@
  * Return value: the newly created theme object
  **/
 StTheme *
-st_theme_new (GFile       *application_stylesheet,
-              GFile       *theme_stylesheet,
-              GFile       *default_stylesheet)
+st_theme_new (const char       *application_stylesheet,
+              const char       *theme_stylesheet,
+              const char       *default_stylesheet)
 {
   StTheme *theme = g_object_new (ST_TYPE_THEME,
                                     "application-stylesheet", application_stylesheet,
@@ -873,19 +850,26 @@
 
             if (import_rule->sheet == NULL)
               {
-                GFile *file = NULL;
+                char *filename = NULL;
 
                 if (import_rule->url->stryng && import_rule->url->stryng->str)
                   {
+                    GFile *file;
+
                     file = _st_theme_resolve_url (a_this,
                                                   a_nodesheet,
                                                   import_rule->url->stryng->str);
-                    import_rule->sheet = parse_stylesheet (file, NULL);
+                    filename = g_file_get_path (file);
+
+                    g_object_unref (file);
                   }
 
+                if (filename)
+                  import_rule->sheet = parse_stylesheet (filename, NULL);
+
                 if (import_rule->sheet)
                   {
-                    insert_stylesheet (a_this, file, import_rule->sheet);
+                    insert_stylesheet (a_this, filename, import_rule->sheet);
                     /* refcount of stylesheets starts off at zero, so we don't need to unref! */
                   }
                 else
@@ -896,8 +880,8 @@
                     import_rule->sheet = (CRStyleSheet *) - 1;
                   }
 
-                if (file)
-                  g_object_unref (file);
+                if (filename)
+                  g_free (filename);
               }
 
             if (import_rule->sheet != (CRStyleSheet *) - 1)
@@ -1026,8 +1010,8 @@
   return props;
 }
 
-/* Resolve an url from an url() reference in a stylesheet into a GFile,
- * if possible. The resolution here is distinctly lame and
+/* Resolve an url from an url() reference in a stylesheet into an absolute
+ * local filename, if possible. The resolution here is distinctly lame and
  * will fail on many examples.
  */
 GFile *
@@ -1036,7 +1020,7 @@
                        const char   *url)
 {
   char *scheme;
-  GFile *resource;
+  GFile *stylesheet, *resource;
 
   if ((scheme = g_uri_parse_scheme (url)))
     {
@@ -1045,18 +1029,21 @@
     }
   else if (base_stylesheet != NULL)
     {
-      GFile *base_file = NULL, *parent;
+      const char *base_filename = NULL;
+      char *dirname;
 
-      base_file = g_hash_table_lookup (theme->files_by_stylesheet, base_stylesheet);
+      base_filename = g_hash_table_lookup (theme->filenames_by_stylesheet, base_stylesheet);
 
       /* This is an internal function, if we get here with
          a bad @base_stylesheet we have a problem. */
-      g_assert (base_file);
+      g_assert (base_filename);
 
-      parent = g_file_get_parent (base_file);
-      resource = g_file_resolve_relative_path (parent, url);
+      dirname = g_path_get_dirname (base_filename);
+      stylesheet = g_file_new_for_path (dirname);
+      resource = g_file_resolve_relative_path (stylesheet, url);
 
-      g_object_unref (parent);
+      g_object_unref (stylesheet);
+      g_free (dirname);
     }
   else
     {
diff '--exclude=.git' -urN a/src/st/st-theme.h b/src/st/st-theme.h
--- a/src/st/st-theme.h	2017-03-09 16:45:01.000000000 -0500
+++ b/src/st/st-theme.h	2017-06-13 08:18:18.018397546 -0400
@@ -39,12 +39,12 @@
 #define ST_TYPE_THEME              (st_theme_get_type ())
 G_DECLARE_FINAL_TYPE (StTheme, st_theme, ST, THEME, GObject)
 
-StTheme *st_theme_new (GFile *application_stylesheet,
-                       GFile *theme_stylesheet,
-                       GFile *default_stylesheet);
+StTheme *st_theme_new (const char *application_stylesheet,
+                       const char *theme_stylesheet,
+                       const char *default_stylesheet);
 
-gboolean  st_theme_load_stylesheet        (StTheme *theme, GFile *file, GError **error);
-void      st_theme_unload_stylesheet      (StTheme *theme, GFile *file);
+gboolean  st_theme_load_stylesheet        (StTheme *theme, const char *path, GError **error);
+void      st_theme_unload_stylesheet      (StTheme *theme, const char *path);
 GSList   *st_theme_get_custom_stylesheets (StTheme *theme);
 
 G_END_DECLS
diff '--exclude=.git' -urN a/src/st/st-widget.c b/src/st/st-widget.c
--- a/src/st/st-widget.c	2017-04-24 18:28:18.000000000 -0400
+++ b/src/st/st-widget.c	2017-06-13 08:26:27.360117871 -0400
@@ -284,29 +284,27 @@
 
 static void
 st_widget_texture_cache_changed (StTextureCache *cache,
-                                 GFile          *file,
+                                 const char     *uri,
                                  gpointer        user_data)
 {
   StWidget *actor = ST_WIDGET (user_data);
   StWidgetPrivate *priv = st_widget_get_instance_private (actor);
   StThemeNode *node = priv->theme_node;
-  StBorderImage *border_image;
+  char *path;
   gboolean changed = FALSE;
-  GFile *theme_file;
 
   if (node == NULL)
     return;
 
-  theme_file = st_theme_node_get_background_image (node);
-  if ((theme_file != NULL) && g_file_equal (theme_file, file))
+  path = g_filename_from_uri (uri, NULL, NULL);
+
+  if (g_strcmp0 (st_theme_node_get_background_image (node), path) == 0)
     {
       st_theme_node_invalidate_background_image (node);
       changed = TRUE;
     }
 
-  border_image = st_theme_node_get_border_image (node);
-  theme_file = border_image ? st_border_image_get_file (border_image) : NULL;
-  if ((theme_file != NULL) && g_file_equal (theme_file, file))
+  if (g_strcmp0 (st_border_image_get_filename (st_theme_node_get_border_image (node)), path) == 0)
     {
       st_theme_node_invalidate_border_image (node);
       changed = TRUE;
@@ -327,6 +325,8 @@
       if (clutter_actor_is_mapped (CLUTTER_ACTOR (actor)))
         clutter_actor_queue_redraw (CLUTTER_ACTOR (actor));
     }
+
+  g_free (path);
 }
 
 static void
diff '--exclude=.git' -urN a/src/st/test-theme.c b/src/st/test-theme.c
--- a/src/st/test-theme.c	2017-03-09 16:45:01.000000000 -0500
+++ b/src/st/test-theme.c	2017-06-13 08:18:18.019397541 -0400
@@ -182,21 +182,17 @@
 			 const char  *node_description,
 			 const char  *expected)
 {
-  GFile *value = st_theme_node_get_background_image (node);
-  GFile *expected_file;
+  const char *value = st_theme_node_get_background_image (node);
+  if (expected == NULL)
+    expected = "(null)";
+  if (value == NULL)
+    value = "(null)";
 
-  if (expected != NULL && value != NULL)
+  if (strcmp (expected, value) != 0)
     {
-      expected_file = g_file_new_for_path (expected);
-
-      if (!g_file_equal (expected_file, value))
-        {
-          char *uri = g_file_get_uri (expected_file);
-          g_print ("%s: %s.background-image: expected: %s, got: %s\n",
-                   test, node_description, expected, uri);
-          fail = TRUE;
-          g_free (uri);
-        }
+      g_print ("%s: %s.background-image: expected: %s, got: %s\n",
+	       test, node_description, expected, value);
+      fail = TRUE;
     }
 }
 
@@ -500,16 +496,14 @@
   StTheme *theme;
   StThemeContext *context;
   PangoFontDescription *font_desc;
-  GFile *file;
 
   gtk_init (&argc, &argv);
 
   if (clutter_init (&argc, &argv) != CLUTTER_INIT_SUCCESS)
     return 1;
 
-  file = g_file_new_for_path ("st/test-theme.css");
-  theme = st_theme_new (file, NULL, NULL);
-  g_object_unref (file);
+  theme = st_theme_new ("st/test-theme.css",
+                        NULL, NULL);
 
   stage = clutter_stage_new ();
   context = st_theme_context_get_for_stage (CLUTTER_STAGE (stage));
diff '--exclude=.git' -urN a/tests/testcommon/ui.js b/tests/testcommon/ui.js
--- a/tests/testcommon/ui.js	2017-04-24 18:28:18.000000000 -0400
+++ b/tests/testcommon/ui.js	2017-06-13 08:18:18.019397541 -0400
@@ -6,7 +6,6 @@
 imports.gi.versions.Gtk = '3.0';
 
 const Clutter = imports.gi.Clutter;
-const Gio = imports.gi.Gio;
 const GLib = imports.gi.GLib;
 const St = imports.gi.St;
 
@@ -16,7 +15,7 @@
     Environment.init();
     let context = St.ThemeContext.get_for_stage(stage);
     let stylesheetPath = GLib.getenv("GNOME_SHELL_TESTSDIR") + "/testcommon/test.css";
-    let theme = new St.Theme({ application_stylesheet: Gio.File.new_for_path(stylesheetPath) });
+    let theme = new St.Theme({ application_stylesheet: stylesheetPath });
     context.set_theme(theme);
 }
 
